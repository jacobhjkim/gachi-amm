/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemoveLiquidityParametersDecoder,
  getRemoveLiquidityParametersEncoder,
  type RemoveLiquidityParameters,
  type RemoveLiquidityParametersArgs,
} from '../types';

export const REMOVE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  80, 85, 209, 72, 24, 206, 177, 108,
]);

export function getRemoveLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_LIQUIDITY_DISCRIMINATOR
  );
}

export type RemoveLiquidityInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends
    | string
    | AccountMeta<string> = 'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC',
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountTokenAAccount extends string | AccountMeta<string> = string,
  TAccountTokenBAccount extends string | AccountMeta<string> = string,
  TAccountTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenBVault extends string | AccountMeta<string> = string,
  TAccountTokenAMint extends string | AccountMeta<string> = string,
  TAccountTokenBMint extends string | AccountMeta<string> = string,
  TAccountPositionNftAccount extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountTokenAProgram extends string | AccountMeta<string> = string,
  TAccountTokenBProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountTokenAAccount extends string
        ? WritableAccount<TAccountTokenAAccount>
        : TAccountTokenAAccount,
      TAccountTokenBAccount extends string
        ? WritableAccount<TAccountTokenBAccount>
        : TAccountTokenBAccount,
      TAccountTokenAVault extends string
        ? WritableAccount<TAccountTokenAVault>
        : TAccountTokenAVault,
      TAccountTokenBVault extends string
        ? WritableAccount<TAccountTokenBVault>
        : TAccountTokenBVault,
      TAccountTokenAMint extends string
        ? ReadonlyAccount<TAccountTokenAMint>
        : TAccountTokenAMint,
      TAccountTokenBMint extends string
        ? ReadonlyAccount<TAccountTokenBMint>
        : TAccountTokenBMint,
      TAccountPositionNftAccount extends string
        ? ReadonlyAccount<TAccountPositionNftAccount>
        : TAccountPositionNftAccount,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenAProgram extends string
        ? ReadonlyAccount<TAccountTokenAProgram>
        : TAccountTokenAProgram,
      TAccountTokenBProgram extends string
        ? ReadonlyAccount<TAccountTokenBProgram>
        : TAccountTokenBProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: RemoveLiquidityParameters;
};

export type RemoveLiquidityInstructionDataArgs = {
  params: RemoveLiquidityParametersArgs;
};

export function getRemoveLiquidityInstructionDataEncoder(): FixedSizeEncoder<RemoveLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getRemoveLiquidityParametersEncoder()],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getRemoveLiquidityInstructionDataDecoder(): FixedSizeDecoder<RemoveLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getRemoveLiquidityParametersDecoder()],
  ]);
}

export function getRemoveLiquidityInstructionDataCodec(): FixedSizeCodec<
  RemoveLiquidityInstructionDataArgs,
  RemoveLiquidityInstructionData
> {
  return combineCodec(
    getRemoveLiquidityInstructionDataEncoder(),
    getRemoveLiquidityInstructionDataDecoder()
  );
}

export type RemoveLiquidityAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountTokenAAccount extends string = string,
  TAccountTokenBAccount extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  /** The user token a account */
  tokenAAccount: Address<TAccountTokenAAccount>;
  /** The user token b account */
  tokenBAccount: Address<TAccountTokenBAccount>;
  /** The vault token account for input token */
  tokenAVault: Address<TAccountTokenAVault>;
  /** The vault token account for output token */
  tokenBVault: Address<TAccountTokenBVault>;
  /** The mint of token a */
  tokenAMint: Address<TAccountTokenAMint>;
  /** The mint of token b */
  tokenBMint: Address<TAccountTokenBMint>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  /** Token a program */
  tokenAProgram: Address<TAccountTokenAProgram>;
  /** Token b program */
  tokenBProgram: Address<TAccountTokenBProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: RemoveLiquidityInstructionDataArgs['params'];
};

export async function getRemoveLiquidityInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountTokenAAccount extends string,
  TAccountTokenBAccount extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: RemoveLiquidityAsyncInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RemoveLiquidityInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    tokenAAccount: { value: input.tokenAAccount ?? null, isWritable: true },
    tokenBAccount: { value: input.tokenBAccount ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.tokenAAccount),
      getAccountMeta(accounts.tokenBAccount),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getRemoveLiquidityInstructionDataEncoder().encode(
      args as RemoveLiquidityInstructionDataArgs
    ),
  } as RemoveLiquidityInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type RemoveLiquidityInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountTokenAAccount extends string = string,
  TAccountTokenBAccount extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  /** The user token a account */
  tokenAAccount: Address<TAccountTokenAAccount>;
  /** The user token b account */
  tokenBAccount: Address<TAccountTokenBAccount>;
  /** The vault token account for input token */
  tokenAVault: Address<TAccountTokenAVault>;
  /** The vault token account for output token */
  tokenBVault: Address<TAccountTokenBVault>;
  /** The mint of token a */
  tokenAMint: Address<TAccountTokenAMint>;
  /** The mint of token b */
  tokenBMint: Address<TAccountTokenBMint>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  /** Token a program */
  tokenAProgram: Address<TAccountTokenAProgram>;
  /** Token b program */
  tokenBProgram: Address<TAccountTokenBProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: RemoveLiquidityInstructionDataArgs['params'];
};

export function getRemoveLiquidityInstruction<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountTokenAAccount extends string,
  TAccountTokenBAccount extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: RemoveLiquidityInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveLiquidityInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountPool,
  TAccountPosition,
  TAccountTokenAAccount,
  TAccountTokenBAccount,
  TAccountTokenAVault,
  TAccountTokenBVault,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountPositionNftAccount,
  TAccountOwner,
  TAccountTokenAProgram,
  TAccountTokenBProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    tokenAAccount: { value: input.tokenAAccount ?? null, isWritable: true },
    tokenBAccount: { value: input.tokenBAccount ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.tokenAAccount),
      getAccountMeta(accounts.tokenBAccount),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getRemoveLiquidityInstructionDataEncoder().encode(
      args as RemoveLiquidityInstructionDataArgs
    ),
  } as RemoveLiquidityInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedRemoveLiquidityInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    pool: TAccountMetas[1];
    position: TAccountMetas[2];
    /** The user token a account */
    tokenAAccount: TAccountMetas[3];
    /** The user token b account */
    tokenBAccount: TAccountMetas[4];
    /** The vault token account for input token */
    tokenAVault: TAccountMetas[5];
    /** The vault token account for output token */
    tokenBVault: TAccountMetas[6];
    /** The mint of token a */
    tokenAMint: TAccountMetas[7];
    /** The mint of token b */
    tokenBMint: TAccountMetas[8];
    /** The token account for nft */
    positionNftAccount: TAccountMetas[9];
    /** owner of position */
    owner: TAccountMetas[10];
    /** Token a program */
    tokenAProgram: TAccountMetas[11];
    /** Token b program */
    tokenBProgram: TAccountMetas[12];
    eventAuthority: TAccountMetas[13];
    program: TAccountMetas[14];
  };
  data: RemoveLiquidityInstructionData;
};

export function parseRemoveLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRemoveLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      pool: getNextAccount(),
      position: getNextAccount(),
      tokenAAccount: getNextAccount(),
      tokenBAccount: getNextAccount(),
      tokenAVault: getNextAccount(),
      tokenBVault: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      positionNftAccount: getNextAccount(),
      owner: getNextAccount(),
      tokenAProgram: getNextAccount(),
      tokenBProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getRemoveLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
