/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_REWARD_DISCRIMINATOR = new Uint8Array([
  149, 95, 181, 242, 94, 90, 158, 162,
]);

export function getClaimRewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_REWARD_DISCRIMINATOR
  );
}

export type ClaimRewardInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends
    | string
    | AccountMeta<string> = 'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC',
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountRewardVault extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountPositionNftAccount extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountPositionNftAccount extends string
        ? ReadonlyAccount<TAccountPositionNftAccount>
        : TAccountPositionNftAccount,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimRewardInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
  skipReward: number;
};

export type ClaimRewardInstructionDataArgs = {
  rewardIndex: number;
  skipReward: number;
};

export function getClaimRewardInstructionDataEncoder(): FixedSizeEncoder<ClaimRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardIndex', getU8Encoder()],
      ['skipReward', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_REWARD_DISCRIMINATOR })
  );
}

export function getClaimRewardInstructionDataDecoder(): FixedSizeDecoder<ClaimRewardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardIndex', getU8Decoder()],
    ['skipReward', getU8Decoder()],
  ]);
}

export function getClaimRewardInstructionDataCodec(): FixedSizeCodec<
  ClaimRewardInstructionDataArgs,
  ClaimRewardInstructionData
> {
  return combineCodec(
    getClaimRewardInstructionDataEncoder(),
    getClaimRewardInstructionDataDecoder()
  );
}

export type ClaimRewardAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  /** The vault token account for reward token */
  rewardVault: Address<TAccountRewardVault>;
  rewardMint: Address<TAccountRewardMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  rewardIndex: ClaimRewardInstructionDataArgs['rewardIndex'];
  skipReward: ClaimRewardInstructionDataArgs['skipReward'];
};

export async function getClaimRewardInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountRewardVault extends string,
  TAccountRewardMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: ClaimRewardAsyncInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimRewardInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimRewardInstructionDataEncoder().encode(
      args as ClaimRewardInstructionDataArgs
    ),
  } as ClaimRewardInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimRewardInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  /** The vault token account for reward token */
  rewardVault: Address<TAccountRewardVault>;
  rewardMint: Address<TAccountRewardMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  rewardIndex: ClaimRewardInstructionDataArgs['rewardIndex'];
  skipReward: ClaimRewardInstructionDataArgs['skipReward'];
};

export function getClaimRewardInstruction<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountRewardVault extends string,
  TAccountRewardMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: ClaimRewardInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimRewardInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountPool,
  TAccountPosition,
  TAccountRewardVault,
  TAccountRewardMint,
  TAccountUserTokenAccount,
  TAccountPositionNftAccount,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimRewardInstructionDataEncoder().encode(
      args as ClaimRewardInstructionDataArgs
    ),
  } as ClaimRewardInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountPosition,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimRewardInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    pool: TAccountMetas[1];
    position: TAccountMetas[2];
    /** The vault token account for reward token */
    rewardVault: TAccountMetas[3];
    rewardMint: TAccountMetas[4];
    userTokenAccount: TAccountMetas[5];
    /** The token account for nft */
    positionNftAccount: TAccountMetas[6];
    /** owner of position */
    owner: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    eventAuthority: TAccountMetas[9];
    program: TAccountMetas[10];
  };
  data: ClaimRewardInstructionData;
};

export function parseClaimRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      pool: getNextAccount(),
      position: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardMint: getNextAccount(),
      userTokenAccount: getNextAccount(),
      positionNftAccount: getNextAccount(),
      owner: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimRewardInstructionDataDecoder().decode(instruction.data),
  };
}
