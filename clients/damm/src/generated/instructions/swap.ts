/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSwapParametersDecoder,
  getSwapParametersEncoder,
  type SwapParameters,
  type SwapParametersArgs,
} from '../types';

export const SWAP_DISCRIMINATOR = new Uint8Array([
  248, 198, 158, 145, 225, 117, 135, 200,
]);

export function getSwapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends
    | string
    | AccountMeta<string> = 'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC',
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountInputTokenAccount extends string | AccountMeta<string> = string,
  TAccountOutputTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenBVault extends string | AccountMeta<string> = string,
  TAccountTokenAMint extends string | AccountMeta<string> = string,
  TAccountTokenBMint extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenAProgram extends string | AccountMeta<string> = string,
  TAccountTokenBProgram extends string | AccountMeta<string> = string,
  TAccountReferralTokenAccount extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountInputTokenAccount extends string
        ? WritableAccount<TAccountInputTokenAccount>
        : TAccountInputTokenAccount,
      TAccountOutputTokenAccount extends string
        ? WritableAccount<TAccountOutputTokenAccount>
        : TAccountOutputTokenAccount,
      TAccountTokenAVault extends string
        ? WritableAccount<TAccountTokenAVault>
        : TAccountTokenAVault,
      TAccountTokenBVault extends string
        ? WritableAccount<TAccountTokenBVault>
        : TAccountTokenBVault,
      TAccountTokenAMint extends string
        ? ReadonlyAccount<TAccountTokenAMint>
        : TAccountTokenAMint,
      TAccountTokenBMint extends string
        ? ReadonlyAccount<TAccountTokenBMint>
        : TAccountTokenBMint,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenAProgram extends string
        ? ReadonlyAccount<TAccountTokenAProgram>
        : TAccountTokenAProgram,
      TAccountTokenBProgram extends string
        ? ReadonlyAccount<TAccountTokenBProgram>
        : TAccountTokenBProgram,
      TAccountReferralTokenAccount extends string
        ? WritableAccount<TAccountReferralTokenAccount>
        : TAccountReferralTokenAccount,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: SwapParameters;
};

export type SwapInstructionDataArgs = { params: SwapParametersArgs };

export function getSwapInstructionDataEncoder(): FixedSizeEncoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getSwapParametersEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): FixedSizeDecoder<SwapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getSwapParametersDecoder()],
  ]);
}

export function getSwapInstructionDataCodec(): FixedSizeCodec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountInputTokenAccount extends string = string,
  TAccountOutputTokenAccount extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountReferralTokenAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  /** Pool account */
  pool: Address<TAccountPool>;
  /** The user token account for input token */
  inputTokenAccount: Address<TAccountInputTokenAccount>;
  /** The user token account for output token */
  outputTokenAccount: Address<TAccountOutputTokenAccount>;
  /** The vault token account for input token */
  tokenAVault: Address<TAccountTokenAVault>;
  /** The vault token account for output token */
  tokenBVault: Address<TAccountTokenBVault>;
  /** The mint of token a */
  tokenAMint: Address<TAccountTokenAMint>;
  /** The mint of token b */
  tokenBMint: Address<TAccountTokenBMint>;
  /** The user performing the swap */
  payer: TransactionSigner<TAccountPayer>;
  /** Token a program */
  tokenAProgram: Address<TAccountTokenAProgram>;
  /** Token b program */
  tokenBProgram: Address<TAccountTokenBProgram>;
  /** referral token account */
  referralTokenAccount?: Address<TAccountReferralTokenAccount>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SwapInstructionDataArgs['params'];
};

export async function getSwapInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountInputTokenAccount extends string,
  TAccountOutputTokenAccount extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountPayer extends string,
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountReferralTokenAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: SwapAsyncInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPayer,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SwapInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPayer,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    inputTokenAccount: {
      value: input.inputTokenAccount ?? null,
      isWritable: true,
    },
    outputTokenAccount: {
      value: input.outputTokenAccount ?? null,
      isWritable: true,
    },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: false },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    referralTokenAccount: {
      value: input.referralTokenAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.inputTokenAccount),
      getAccountMeta(accounts.outputTokenAccount),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.referralTokenAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPayer,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type SwapInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountInputTokenAccount extends string = string,
  TAccountOutputTokenAccount extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountReferralTokenAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  /** Pool account */
  pool: Address<TAccountPool>;
  /** The user token account for input token */
  inputTokenAccount: Address<TAccountInputTokenAccount>;
  /** The user token account for output token */
  outputTokenAccount: Address<TAccountOutputTokenAccount>;
  /** The vault token account for input token */
  tokenAVault: Address<TAccountTokenAVault>;
  /** The vault token account for output token */
  tokenBVault: Address<TAccountTokenBVault>;
  /** The mint of token a */
  tokenAMint: Address<TAccountTokenAMint>;
  /** The mint of token b */
  tokenBMint: Address<TAccountTokenBMint>;
  /** The user performing the swap */
  payer: TransactionSigner<TAccountPayer>;
  /** Token a program */
  tokenAProgram: Address<TAccountTokenAProgram>;
  /** Token b program */
  tokenBProgram: Address<TAccountTokenBProgram>;
  /** referral token account */
  referralTokenAccount?: Address<TAccountReferralTokenAccount>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SwapInstructionDataArgs['params'];
};

export function getSwapInstruction<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountInputTokenAccount extends string,
  TAccountOutputTokenAccount extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountPayer extends string,
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountReferralTokenAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPayer,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountPool,
  TAccountInputTokenAccount,
  TAccountOutputTokenAccount,
  TAccountTokenAVault,
  TAccountTokenBVault,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountPayer,
  TAccountTokenAProgram,
  TAccountTokenBProgram,
  TAccountReferralTokenAccount,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    inputTokenAccount: {
      value: input.inputTokenAccount ?? null,
      isWritable: true,
    },
    outputTokenAccount: {
      value: input.outputTokenAccount ?? null,
      isWritable: true,
    },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: false },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    referralTokenAccount: {
      value: input.referralTokenAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.inputTokenAccount),
      getAccountMeta(accounts.outputTokenAccount),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.referralTokenAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPayer,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    /** Pool account */
    pool: TAccountMetas[1];
    /** The user token account for input token */
    inputTokenAccount: TAccountMetas[2];
    /** The user token account for output token */
    outputTokenAccount: TAccountMetas[3];
    /** The vault token account for input token */
    tokenAVault: TAccountMetas[4];
    /** The vault token account for output token */
    tokenBVault: TAccountMetas[5];
    /** The mint of token a */
    tokenAMint: TAccountMetas[6];
    /** The mint of token b */
    tokenBMint: TAccountMetas[7];
    /** The user performing the swap */
    payer: TAccountMetas[8];
    /** Token a program */
    tokenAProgram: TAccountMetas[9];
    /** Token b program */
    tokenBProgram: TAccountMetas[10];
    /** referral token account */
    referralTokenAccount?: TAccountMetas[11] | undefined;
    eventAuthority: TAccountMetas[12];
    program: TAccountMetas[13];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === CP_AMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      pool: getNextAccount(),
      inputTokenAccount: getNextAccount(),
      outputTokenAccount: getNextAccount(),
      tokenAVault: getNextAccount(),
      tokenBVault: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      payer: getNextAccount(),
      tokenAProgram: getNextAccount(),
      tokenBProgram: getNextAccount(),
      referralTokenAccount: getNextOptionalAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
