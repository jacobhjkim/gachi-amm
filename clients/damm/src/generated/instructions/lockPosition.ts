/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const LOCK_POSITION_DISCRIMINATOR = new Uint8Array([
  227, 62, 2, 252, 247, 10, 171, 185,
]);

export function getLockPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LOCK_POSITION_DISCRIMINATOR
  );
}

export type LockPositionInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountVesting extends string | AccountMeta<string> = string,
  TAccountPositionNftAccount extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountVesting extends string
        ? WritableSignerAccount<TAccountVesting> &
            AccountSignerMeta<TAccountVesting>
        : TAccountVesting,
      TAccountPositionNftAccount extends string
        ? ReadonlyAccount<TAccountPositionNftAccount>
        : TAccountPositionNftAccount,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LockPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
  cliffPoint: Option<bigint>;
  periodFrequency: bigint;
  cliffUnlockLiquidity: bigint;
  liquidityPerPeriod: bigint;
  numberOfPeriod: number;
};

export type LockPositionInstructionDataArgs = {
  cliffPoint: OptionOrNullable<number | bigint>;
  periodFrequency: number | bigint;
  cliffUnlockLiquidity: number | bigint;
  liquidityPerPeriod: number | bigint;
  numberOfPeriod: number;
};

export function getLockPositionInstructionDataEncoder(): Encoder<LockPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['cliffPoint', getOptionEncoder(getU64Encoder())],
      ['periodFrequency', getU64Encoder()],
      ['cliffUnlockLiquidity', getU128Encoder()],
      ['liquidityPerPeriod', getU128Encoder()],
      ['numberOfPeriod', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCK_POSITION_DISCRIMINATOR })
  );
}

export function getLockPositionInstructionDataDecoder(): Decoder<LockPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['cliffPoint', getOptionDecoder(getU64Decoder())],
    ['periodFrequency', getU64Decoder()],
    ['cliffUnlockLiquidity', getU128Decoder()],
    ['liquidityPerPeriod', getU128Decoder()],
    ['numberOfPeriod', getU16Decoder()],
  ]);
}

export function getLockPositionInstructionDataCodec(): Codec<
  LockPositionInstructionDataArgs,
  LockPositionInstructionData
> {
  return combineCodec(
    getLockPositionInstructionDataEncoder(),
    getLockPositionInstructionDataDecoder()
  );
}

export type LockPositionAsyncInput<
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountVesting extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  vesting: TransactionSigner<TAccountVesting>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  cliffPoint: LockPositionInstructionDataArgs['cliffPoint'];
  periodFrequency: LockPositionInstructionDataArgs['periodFrequency'];
  cliffUnlockLiquidity: LockPositionInstructionDataArgs['cliffUnlockLiquidity'];
  liquidityPerPeriod: LockPositionInstructionDataArgs['liquidityPerPeriod'];
  numberOfPeriod: LockPositionInstructionDataArgs['numberOfPeriod'];
};

export async function getLockPositionInstructionAsync<
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountVesting extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: LockPositionAsyncInput<
    TAccountPool,
    TAccountPosition,
    TAccountVesting,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  LockPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPosition,
    TAccountVesting,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    vesting: { value: input.vesting ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.vesting),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getLockPositionInstructionDataEncoder().encode(
      args as LockPositionInstructionDataArgs
    ),
  } as LockPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPosition,
    TAccountVesting,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type LockPositionInput<
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountVesting extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  vesting: TransactionSigner<TAccountVesting>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  cliffPoint: LockPositionInstructionDataArgs['cliffPoint'];
  periodFrequency: LockPositionInstructionDataArgs['periodFrequency'];
  cliffUnlockLiquidity: LockPositionInstructionDataArgs['cliffUnlockLiquidity'];
  liquidityPerPeriod: LockPositionInstructionDataArgs['liquidityPerPeriod'];
  numberOfPeriod: LockPositionInstructionDataArgs['numberOfPeriod'];
};

export function getLockPositionInstruction<
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountVesting extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: LockPositionInput<
    TAccountPool,
    TAccountPosition,
    TAccountVesting,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): LockPositionInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountPosition,
  TAccountVesting,
  TAccountPositionNftAccount,
  TAccountOwner,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    vesting: { value: input.vesting ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.vesting),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getLockPositionInstructionDataEncoder().encode(
      args as LockPositionInstructionDataArgs
    ),
  } as LockPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPosition,
    TAccountVesting,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedLockPositionInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    position: TAccountMetas[1];
    vesting: TAccountMetas[2];
    /** The token account for nft */
    positionNftAccount: TAccountMetas[3];
    /** owner of position */
    owner: TAccountMetas[4];
    payer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: LockPositionInstructionData;
};

export function parseLockPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedLockPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      position: getNextAccount(),
      vesting: getNextAccount(),
      positionNftAccount: getNextAccount(),
      owner: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getLockPositionInstructionDataDecoder().decode(instruction.data),
  };
}
