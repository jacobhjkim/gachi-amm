/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSplitPositionParametersDecoder,
  getSplitPositionParametersEncoder,
  type SplitPositionParameters,
  type SplitPositionParametersArgs,
} from '../types';

export const SPLIT_POSITION_DISCRIMINATOR = new Uint8Array([
  172, 241, 221, 138, 161, 29, 253, 42,
]);

export function getSplitPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SPLIT_POSITION_DISCRIMINATOR
  );
}

export type SplitPositionInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountFirstPosition extends string | AccountMeta<string> = string,
  TAccountFirstPositionNftAccount extends string | AccountMeta<string> = string,
  TAccountSecondPosition extends string | AccountMeta<string> = string,
  TAccountSecondPositionNftAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountFirstOwner extends string | AccountMeta<string> = string,
  TAccountSecondOwner extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountFirstPosition extends string
        ? WritableAccount<TAccountFirstPosition>
        : TAccountFirstPosition,
      TAccountFirstPositionNftAccount extends string
        ? ReadonlyAccount<TAccountFirstPositionNftAccount>
        : TAccountFirstPositionNftAccount,
      TAccountSecondPosition extends string
        ? WritableAccount<TAccountSecondPosition>
        : TAccountSecondPosition,
      TAccountSecondPositionNftAccount extends string
        ? ReadonlyAccount<TAccountSecondPositionNftAccount>
        : TAccountSecondPositionNftAccount,
      TAccountFirstOwner extends string
        ? ReadonlySignerAccount<TAccountFirstOwner> &
            AccountSignerMeta<TAccountFirstOwner>
        : TAccountFirstOwner,
      TAccountSecondOwner extends string
        ? ReadonlySignerAccount<TAccountSecondOwner> &
            AccountSignerMeta<TAccountSecondOwner>
        : TAccountSecondOwner,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SplitPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: SplitPositionParameters;
};

export type SplitPositionInstructionDataArgs = {
  params: SplitPositionParametersArgs;
};

export function getSplitPositionInstructionDataEncoder(): FixedSizeEncoder<SplitPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getSplitPositionParametersEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SPLIT_POSITION_DISCRIMINATOR })
  );
}

export function getSplitPositionInstructionDataDecoder(): FixedSizeDecoder<SplitPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getSplitPositionParametersDecoder()],
  ]);
}

export function getSplitPositionInstructionDataCodec(): FixedSizeCodec<
  SplitPositionInstructionDataArgs,
  SplitPositionInstructionData
> {
  return combineCodec(
    getSplitPositionInstructionDataEncoder(),
    getSplitPositionInstructionDataDecoder()
  );
}

export type SplitPositionAsyncInput<
  TAccountPool extends string = string,
  TAccountFirstPosition extends string = string,
  TAccountFirstPositionNftAccount extends string = string,
  TAccountSecondPosition extends string = string,
  TAccountSecondPositionNftAccount extends string = string,
  TAccountFirstOwner extends string = string,
  TAccountSecondOwner extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  /** The first position */
  firstPosition: Address<TAccountFirstPosition>;
  /** The token account for position nft */
  firstPositionNftAccount: Address<TAccountFirstPositionNftAccount>;
  /** The second position */
  secondPosition: Address<TAccountSecondPosition>;
  /** The token account for position nft */
  secondPositionNftAccount: Address<TAccountSecondPositionNftAccount>;
  /** Owner of first position */
  firstOwner: TransactionSigner<TAccountFirstOwner>;
  /** Owner of second position */
  secondOwner: TransactionSigner<TAccountSecondOwner>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SplitPositionInstructionDataArgs['params'];
};

export async function getSplitPositionInstructionAsync<
  TAccountPool extends string,
  TAccountFirstPosition extends string,
  TAccountFirstPositionNftAccount extends string,
  TAccountSecondPosition extends string,
  TAccountSecondPositionNftAccount extends string,
  TAccountFirstOwner extends string,
  TAccountSecondOwner extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: SplitPositionAsyncInput<
    TAccountPool,
    TAccountFirstPosition,
    TAccountFirstPositionNftAccount,
    TAccountSecondPosition,
    TAccountSecondPositionNftAccount,
    TAccountFirstOwner,
    TAccountSecondOwner,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SplitPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountFirstPosition,
    TAccountFirstPositionNftAccount,
    TAccountSecondPosition,
    TAccountSecondPositionNftAccount,
    TAccountFirstOwner,
    TAccountSecondOwner,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    firstPosition: { value: input.firstPosition ?? null, isWritable: true },
    firstPositionNftAccount: {
      value: input.firstPositionNftAccount ?? null,
      isWritable: false,
    },
    secondPosition: { value: input.secondPosition ?? null, isWritable: true },
    secondPositionNftAccount: {
      value: input.secondPositionNftAccount ?? null,
      isWritable: false,
    },
    firstOwner: { value: input.firstOwner ?? null, isWritable: false },
    secondOwner: { value: input.secondOwner ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.firstPosition),
      getAccountMeta(accounts.firstPositionNftAccount),
      getAccountMeta(accounts.secondPosition),
      getAccountMeta(accounts.secondPositionNftAccount),
      getAccountMeta(accounts.firstOwner),
      getAccountMeta(accounts.secondOwner),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSplitPositionInstructionDataEncoder().encode(
      args as SplitPositionInstructionDataArgs
    ),
  } as SplitPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountFirstPosition,
    TAccountFirstPositionNftAccount,
    TAccountSecondPosition,
    TAccountSecondPositionNftAccount,
    TAccountFirstOwner,
    TAccountSecondOwner,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type SplitPositionInput<
  TAccountPool extends string = string,
  TAccountFirstPosition extends string = string,
  TAccountFirstPositionNftAccount extends string = string,
  TAccountSecondPosition extends string = string,
  TAccountSecondPositionNftAccount extends string = string,
  TAccountFirstOwner extends string = string,
  TAccountSecondOwner extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  /** The first position */
  firstPosition: Address<TAccountFirstPosition>;
  /** The token account for position nft */
  firstPositionNftAccount: Address<TAccountFirstPositionNftAccount>;
  /** The second position */
  secondPosition: Address<TAccountSecondPosition>;
  /** The token account for position nft */
  secondPositionNftAccount: Address<TAccountSecondPositionNftAccount>;
  /** Owner of first position */
  firstOwner: TransactionSigner<TAccountFirstOwner>;
  /** Owner of second position */
  secondOwner: TransactionSigner<TAccountSecondOwner>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SplitPositionInstructionDataArgs['params'];
};

export function getSplitPositionInstruction<
  TAccountPool extends string,
  TAccountFirstPosition extends string,
  TAccountFirstPositionNftAccount extends string,
  TAccountSecondPosition extends string,
  TAccountSecondPositionNftAccount extends string,
  TAccountFirstOwner extends string,
  TAccountSecondOwner extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: SplitPositionInput<
    TAccountPool,
    TAccountFirstPosition,
    TAccountFirstPositionNftAccount,
    TAccountSecondPosition,
    TAccountSecondPositionNftAccount,
    TAccountFirstOwner,
    TAccountSecondOwner,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SplitPositionInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountFirstPosition,
  TAccountFirstPositionNftAccount,
  TAccountSecondPosition,
  TAccountSecondPositionNftAccount,
  TAccountFirstOwner,
  TAccountSecondOwner,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    firstPosition: { value: input.firstPosition ?? null, isWritable: true },
    firstPositionNftAccount: {
      value: input.firstPositionNftAccount ?? null,
      isWritable: false,
    },
    secondPosition: { value: input.secondPosition ?? null, isWritable: true },
    secondPositionNftAccount: {
      value: input.secondPositionNftAccount ?? null,
      isWritable: false,
    },
    firstOwner: { value: input.firstOwner ?? null, isWritable: false },
    secondOwner: { value: input.secondOwner ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.firstPosition),
      getAccountMeta(accounts.firstPositionNftAccount),
      getAccountMeta(accounts.secondPosition),
      getAccountMeta(accounts.secondPositionNftAccount),
      getAccountMeta(accounts.firstOwner),
      getAccountMeta(accounts.secondOwner),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSplitPositionInstructionDataEncoder().encode(
      args as SplitPositionInstructionDataArgs
    ),
  } as SplitPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountFirstPosition,
    TAccountFirstPositionNftAccount,
    TAccountSecondPosition,
    TAccountSecondPositionNftAccount,
    TAccountFirstOwner,
    TAccountSecondOwner,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedSplitPositionInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    /** The first position */
    firstPosition: TAccountMetas[1];
    /** The token account for position nft */
    firstPositionNftAccount: TAccountMetas[2];
    /** The second position */
    secondPosition: TAccountMetas[3];
    /** The token account for position nft */
    secondPositionNftAccount: TAccountMetas[4];
    /** Owner of first position */
    firstOwner: TAccountMetas[5];
    /** Owner of second position */
    secondOwner: TAccountMetas[6];
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: SplitPositionInstructionData;
};

export function parseSplitPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSplitPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      firstPosition: getNextAccount(),
      firstPositionNftAccount: getNextAccount(),
      secondPosition: getNextAccount(),
      secondPositionNftAccount: getNextAccount(),
      firstOwner: getNextAccount(),
      secondOwner: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSplitPositionInstructionDataDecoder().decode(instruction.data),
  };
}
