/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_PARTNER_FEE_DISCRIMINATOR = new Uint8Array([
  97, 206, 39, 105, 94, 94, 126, 148,
]);

export function getClaimPartnerFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_PARTNER_FEE_DISCRIMINATOR
  );
}

export type ClaimPartnerFeeInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends
    | string
    | AccountMeta<string> = 'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC',
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountTokenAAccount extends string | AccountMeta<string> = string,
  TAccountTokenBAccount extends string | AccountMeta<string> = string,
  TAccountTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenBVault extends string | AccountMeta<string> = string,
  TAccountTokenAMint extends string | AccountMeta<string> = string,
  TAccountTokenBMint extends string | AccountMeta<string> = string,
  TAccountPartner extends string | AccountMeta<string> = string,
  TAccountTokenAProgram extends string | AccountMeta<string> = string,
  TAccountTokenBProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountTokenAAccount extends string
        ? WritableAccount<TAccountTokenAAccount>
        : TAccountTokenAAccount,
      TAccountTokenBAccount extends string
        ? WritableAccount<TAccountTokenBAccount>
        : TAccountTokenBAccount,
      TAccountTokenAVault extends string
        ? WritableAccount<TAccountTokenAVault>
        : TAccountTokenAVault,
      TAccountTokenBVault extends string
        ? WritableAccount<TAccountTokenBVault>
        : TAccountTokenBVault,
      TAccountTokenAMint extends string
        ? ReadonlyAccount<TAccountTokenAMint>
        : TAccountTokenAMint,
      TAccountTokenBMint extends string
        ? ReadonlyAccount<TAccountTokenBMint>
        : TAccountTokenBMint,
      TAccountPartner extends string
        ? ReadonlySignerAccount<TAccountPartner> &
            AccountSignerMeta<TAccountPartner>
        : TAccountPartner,
      TAccountTokenAProgram extends string
        ? ReadonlyAccount<TAccountTokenAProgram>
        : TAccountTokenAProgram,
      TAccountTokenBProgram extends string
        ? ReadonlyAccount<TAccountTokenBProgram>
        : TAccountTokenBProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimPartnerFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmountA: bigint;
  maxAmountB: bigint;
};

export type ClaimPartnerFeeInstructionDataArgs = {
  maxAmountA: number | bigint;
  maxAmountB: number | bigint;
};

export function getClaimPartnerFeeInstructionDataEncoder(): FixedSizeEncoder<ClaimPartnerFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmountA', getU64Encoder()],
      ['maxAmountB', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_PARTNER_FEE_DISCRIMINATOR })
  );
}

export function getClaimPartnerFeeInstructionDataDecoder(): FixedSizeDecoder<ClaimPartnerFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmountA', getU64Decoder()],
    ['maxAmountB', getU64Decoder()],
  ]);
}

export function getClaimPartnerFeeInstructionDataCodec(): FixedSizeCodec<
  ClaimPartnerFeeInstructionDataArgs,
  ClaimPartnerFeeInstructionData
> {
  return combineCodec(
    getClaimPartnerFeeInstructionDataEncoder(),
    getClaimPartnerFeeInstructionDataDecoder()
  );
}

export type ClaimPartnerFeeAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountTokenAAccount extends string = string,
  TAccountTokenBAccount extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountPartner extends string = string,
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  /** The treasury token a account */
  tokenAAccount: Address<TAccountTokenAAccount>;
  /** The treasury token b account */
  tokenBAccount: Address<TAccountTokenBAccount>;
  /** The vault token account for input token */
  tokenAVault: Address<TAccountTokenAVault>;
  /** The vault token account for output token */
  tokenBVault: Address<TAccountTokenBVault>;
  /** The mint of token a */
  tokenAMint: Address<TAccountTokenAMint>;
  /** The mint of token b */
  tokenBMint: Address<TAccountTokenBMint>;
  partner: TransactionSigner<TAccountPartner>;
  /** Token a program */
  tokenAProgram: Address<TAccountTokenAProgram>;
  /** Token b program */
  tokenBProgram: Address<TAccountTokenBProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmountA: ClaimPartnerFeeInstructionDataArgs['maxAmountA'];
  maxAmountB: ClaimPartnerFeeInstructionDataArgs['maxAmountB'];
};

export async function getClaimPartnerFeeInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountTokenAAccount extends string,
  TAccountTokenBAccount extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountPartner extends string,
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: ClaimPartnerFeeAsyncInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPartner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimPartnerFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPartner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    tokenAAccount: { value: input.tokenAAccount ?? null, isWritable: true },
    tokenBAccount: { value: input.tokenBAccount ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    partner: { value: input.partner ?? null, isWritable: false },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.tokenAAccount),
      getAccountMeta(accounts.tokenBAccount),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.partner),
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimPartnerFeeInstructionDataEncoder().encode(
      args as ClaimPartnerFeeInstructionDataArgs
    ),
  } as ClaimPartnerFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPartner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimPartnerFeeInput<
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountTokenAAccount extends string = string,
  TAccountTokenBAccount extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountPartner extends string = string,
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  /** The treasury token a account */
  tokenAAccount: Address<TAccountTokenAAccount>;
  /** The treasury token b account */
  tokenBAccount: Address<TAccountTokenBAccount>;
  /** The vault token account for input token */
  tokenAVault: Address<TAccountTokenAVault>;
  /** The vault token account for output token */
  tokenBVault: Address<TAccountTokenBVault>;
  /** The mint of token a */
  tokenAMint: Address<TAccountTokenAMint>;
  /** The mint of token b */
  tokenBMint: Address<TAccountTokenBMint>;
  partner: TransactionSigner<TAccountPartner>;
  /** Token a program */
  tokenAProgram: Address<TAccountTokenAProgram>;
  /** Token b program */
  tokenBProgram: Address<TAccountTokenBProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmountA: ClaimPartnerFeeInstructionDataArgs['maxAmountA'];
  maxAmountB: ClaimPartnerFeeInstructionDataArgs['maxAmountB'];
};

export function getClaimPartnerFeeInstruction<
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountTokenAAccount extends string,
  TAccountTokenBAccount extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountPartner extends string,
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: ClaimPartnerFeeInput<
    TAccountPoolAuthority,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPartner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimPartnerFeeInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountPool,
  TAccountTokenAAccount,
  TAccountTokenBAccount,
  TAccountTokenAVault,
  TAccountTokenBVault,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountPartner,
  TAccountTokenAProgram,
  TAccountTokenBProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    tokenAAccount: { value: input.tokenAAccount ?? null, isWritable: true },
    tokenBAccount: { value: input.tokenBAccount ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    partner: { value: input.partner ?? null, isWritable: false },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value =
      'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC' as Address<'HLnpSz9h2S4hiLQ43rnSD9XkcUThA7B8hQMKmDaiTLcC'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.tokenAAccount),
      getAccountMeta(accounts.tokenBAccount),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.partner),
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimPartnerFeeInstructionDataEncoder().encode(
      args as ClaimPartnerFeeInstructionDataArgs
    ),
  } as ClaimPartnerFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountPartner,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimPartnerFeeInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    pool: TAccountMetas[1];
    /** The treasury token a account */
    tokenAAccount: TAccountMetas[2];
    /** The treasury token b account */
    tokenBAccount: TAccountMetas[3];
    /** The vault token account for input token */
    tokenAVault: TAccountMetas[4];
    /** The vault token account for output token */
    tokenBVault: TAccountMetas[5];
    /** The mint of token a */
    tokenAMint: TAccountMetas[6];
    /** The mint of token b */
    tokenBMint: TAccountMetas[7];
    partner: TAccountMetas[8];
    /** Token a program */
    tokenAProgram: TAccountMetas[9];
    /** Token b program */
    tokenBProgram: TAccountMetas[10];
    eventAuthority: TAccountMetas[11];
    program: TAccountMetas[12];
  };
  data: ClaimPartnerFeeInstructionData;
};

export function parseClaimPartnerFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimPartnerFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      pool: getNextAccount(),
      tokenAAccount: getNextAccount(),
      tokenBAccount: getNextAccount(),
      tokenAVault: getNextAccount(),
      tokenBVault: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      partner: getNextAccount(),
      tokenAProgram: getNextAccount(),
      tokenBProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimPartnerFeeInstructionDataDecoder().decode(instruction.data),
  };
}
