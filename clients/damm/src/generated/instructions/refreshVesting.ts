/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REFRESH_VESTING_DISCRIMINATOR = new Uint8Array([
  9, 94, 216, 14, 116, 204, 247, 0,
]);

export function getRefreshVestingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFRESH_VESTING_DISCRIMINATOR
  );
}

export type RefreshVestingInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountPositionNftAccount extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionNftAccount extends string
        ? ReadonlyAccount<TAccountPositionNftAccount>
        : TAccountPositionNftAccount,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      ...TRemainingAccounts,
    ]
  >;

export type RefreshVestingInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type RefreshVestingInstructionDataArgs = {};

export function getRefreshVestingInstructionDataEncoder(): FixedSizeEncoder<RefreshVestingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REFRESH_VESTING_DISCRIMINATOR })
  );
}

export function getRefreshVestingInstructionDataDecoder(): FixedSizeDecoder<RefreshVestingInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRefreshVestingInstructionDataCodec(): FixedSizeCodec<
  RefreshVestingInstructionDataArgs,
  RefreshVestingInstructionData
> {
  return combineCodec(
    getRefreshVestingInstructionDataEncoder(),
    getRefreshVestingInstructionDataDecoder()
  );
}

export type RefreshVestingInput<
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
> = {
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  owner: Address<TAccountOwner>;
};

export function getRefreshVestingInstruction<
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: RefreshVestingInput<
    TAccountPool,
    TAccountPosition,
    TAccountPositionNftAccount,
    TAccountOwner
  >,
  config?: { programAddress?: TProgramAddress }
): RefreshVestingInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountPosition,
  TAccountPositionNftAccount,
  TAccountOwner
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
    ],
    programAddress,
    data: getRefreshVestingInstructionDataEncoder().encode({}),
  } as RefreshVestingInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPosition,
    TAccountPositionNftAccount,
    TAccountOwner
  >;

  return instruction;
}

export type ParsedRefreshVestingInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    position: TAccountMetas[1];
    /** The token account for nft */
    positionNftAccount: TAccountMetas[2];
    owner: TAccountMetas[3];
  };
  data: RefreshVestingInstructionData;
};

export function parseRefreshVestingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRefreshVestingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      position: getNextAccount(),
      positionNftAccount: getNextAccount(),
      owner: getNextAccount(),
    },
    data: getRefreshVestingInstructionDataDecoder().decode(instruction.data),
  };
}
