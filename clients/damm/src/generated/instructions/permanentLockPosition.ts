/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PERMANENT_LOCK_POSITION_DISCRIMINATOR = new Uint8Array([
  165, 176, 125, 6, 231, 171, 186, 213,
]);

export function getPermanentLockPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PERMANENT_LOCK_POSITION_DISCRIMINATOR
  );
}

export type PermanentLockPositionInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountPositionNftAccount extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionNftAccount extends string
        ? ReadonlyAccount<TAccountPositionNftAccount>
        : TAccountPositionNftAccount,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PermanentLockPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
  permanentLockLiquidity: bigint;
};

export type PermanentLockPositionInstructionDataArgs = {
  permanentLockLiquidity: number | bigint;
};

export function getPermanentLockPositionInstructionDataEncoder(): FixedSizeEncoder<PermanentLockPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['permanentLockLiquidity', getU128Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: PERMANENT_LOCK_POSITION_DISCRIMINATOR,
    })
  );
}

export function getPermanentLockPositionInstructionDataDecoder(): FixedSizeDecoder<PermanentLockPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['permanentLockLiquidity', getU128Decoder()],
  ]);
}

export function getPermanentLockPositionInstructionDataCodec(): FixedSizeCodec<
  PermanentLockPositionInstructionDataArgs,
  PermanentLockPositionInstructionData
> {
  return combineCodec(
    getPermanentLockPositionInstructionDataEncoder(),
    getPermanentLockPositionInstructionDataDecoder()
  );
}

export type PermanentLockPositionAsyncInput<
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  permanentLockLiquidity: PermanentLockPositionInstructionDataArgs['permanentLockLiquidity'];
};

export async function getPermanentLockPositionInstructionAsync<
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: PermanentLockPositionAsyncInput<
    TAccountPool,
    TAccountPosition,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PermanentLockPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPosition,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getPermanentLockPositionInstructionDataEncoder().encode(
      args as PermanentLockPositionInstructionDataArgs
    ),
  } as PermanentLockPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPosition,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type PermanentLockPositionInput<
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  position: Address<TAccountPosition>;
  /** The token account for nft */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** owner of position */
  owner: TransactionSigner<TAccountOwner>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  permanentLockLiquidity: PermanentLockPositionInstructionDataArgs['permanentLockLiquidity'];
};

export function getPermanentLockPositionInstruction<
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountPositionNftAccount extends string,
  TAccountOwner extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof CP_AMM_PROGRAM_ADDRESS,
>(
  input: PermanentLockPositionInput<
    TAccountPool,
    TAccountPosition,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PermanentLockPositionInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountPosition,
  TAccountPositionNftAccount,
  TAccountOwner,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getPermanentLockPositionInstructionDataEncoder().encode(
      args as PermanentLockPositionInstructionDataArgs
    ),
  } as PermanentLockPositionInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPosition,
    TAccountPositionNftAccount,
    TAccountOwner,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedPermanentLockPositionInstruction<
  TProgram extends string = typeof CP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    position: TAccountMetas[1];
    /** The token account for nft */
    positionNftAccount: TAccountMetas[2];
    /** owner of position */
    owner: TAccountMetas[3];
    eventAuthority: TAccountMetas[4];
    program: TAccountMetas[5];
  };
  data: PermanentLockPositionInstructionData;
};

export function parsePermanentLockPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPermanentLockPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      position: getNextAccount(),
      positionNftAccount: getNextAccount(),
      owner: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getPermanentLockPositionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
