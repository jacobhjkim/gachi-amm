/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddLiquidityInstruction,
  type ParsedClaimPartnerFeeInstruction,
  type ParsedClaimPositionFeeInstruction,
  type ParsedClaimProtocolFeeInstruction,
  type ParsedClaimRewardInstruction,
  type ParsedCloseClaimFeeOperatorInstruction,
  type ParsedCloseConfigInstruction,
  type ParsedClosePositionInstruction,
  type ParsedCloseTokenBadgeInstruction,
  type ParsedCreateClaimFeeOperatorInstruction,
  type ParsedCreateConfigInstruction,
  type ParsedCreateDynamicConfigInstruction,
  type ParsedCreatePositionInstruction,
  type ParsedCreateTokenBadgeInstruction,
  type ParsedFundRewardInstruction,
  type ParsedInitializeCustomizablePoolInstruction,
  type ParsedInitializePoolInstruction,
  type ParsedInitializePoolWithDynamicConfigInstruction,
  type ParsedInitializeRewardInstruction,
  type ParsedLockPositionInstruction,
  type ParsedPermanentLockPositionInstruction,
  type ParsedRefreshVestingInstruction,
  type ParsedRemoveAllLiquidityInstruction,
  type ParsedRemoveLiquidityInstruction,
  type ParsedSetPoolStatusInstruction,
  type ParsedSplitPositionInstruction,
  type ParsedSwapInstruction,
  type ParsedUpdateRewardDurationInstruction,
  type ParsedUpdateRewardFunderInstruction,
  type ParsedWithdrawIneligibleRewardInstruction,
} from '../instructions';

export const CP_AMM_PROGRAM_ADDRESS =
  'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG' as Address<'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG'>;

export enum CpAmmAccount {
  ClaimFeeOperator,
  Config,
  Pool,
  Position,
  TokenBadge,
  Vesting,
}

export function identifyCpAmmAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpAmmAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([166, 48, 134, 86, 34, 200, 188, 150])
      ),
      0
    )
  ) {
    return CpAmmAccount.ClaimFeeOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return CpAmmAccount.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
      ),
      0
    )
  ) {
    return CpAmmAccount.Pool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208])
      ),
      0
    )
  ) {
    return CpAmmAccount.Position;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 219, 204, 229, 249, 116, 255, 150])
      ),
      0
    )
  ) {
    return CpAmmAccount.TokenBadge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([100, 149, 66, 138, 95, 200, 128, 241])
      ),
      0
    )
  ) {
    return CpAmmAccount.Vesting;
  }
  throw new Error(
    'The provided account could not be identified as a cpAmm account.'
  );
}

export enum CpAmmInstruction {
  AddLiquidity,
  ClaimPartnerFee,
  ClaimPositionFee,
  ClaimProtocolFee,
  ClaimReward,
  CloseClaimFeeOperator,
  CloseConfig,
  ClosePosition,
  CloseTokenBadge,
  CreateClaimFeeOperator,
  CreateConfig,
  CreateDynamicConfig,
  CreatePosition,
  CreateTokenBadge,
  FundReward,
  InitializeCustomizablePool,
  InitializePool,
  InitializePoolWithDynamicConfig,
  InitializeReward,
  LockPosition,
  PermanentLockPosition,
  RefreshVesting,
  RemoveAllLiquidity,
  RemoveLiquidity,
  SetPoolStatus,
  SplitPosition,
  Swap,
  UpdateRewardDuration,
  UpdateRewardFunder,
  WithdrawIneligibleReward,
}

export function identifyCpAmmInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpAmmInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 157, 89, 67, 143, 182, 52, 72])
      ),
      0
    )
  ) {
    return CpAmmInstruction.AddLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 206, 39, 105, 94, 94, 126, 148])
      ),
      0
    )
  ) {
    return CpAmmInstruction.ClaimPartnerFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([180, 38, 154, 17, 133, 33, 162, 211])
      ),
      0
    )
  ) {
    return CpAmmInstruction.ClaimPositionFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([165, 228, 133, 48, 99, 249, 255, 33])
      ),
      0
    )
  ) {
    return CpAmmInstruction.ClaimProtocolFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 95, 181, 242, 94, 90, 158, 162])
      ),
      0
    )
  ) {
    return CpAmmInstruction.ClaimReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([38, 134, 82, 216, 95, 124, 17, 99])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CloseClaimFeeOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 9, 72, 157, 95, 125, 61, 85])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CloseConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 134, 81, 0, 49, 68, 98, 98])
      ),
      0
    )
  ) {
    return CpAmmInstruction.ClosePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 146, 86, 110, 179, 254, 10, 104])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CloseTokenBadge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 62, 207, 107, 58, 187, 162, 109])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CreateClaimFeeOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 207, 243, 114, 75, 111, 47, 189])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CreateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([81, 251, 122, 78, 66, 57, 208, 82])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CreateDynamicConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 215, 197, 153, 96, 203, 180, 133])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CreatePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([88, 206, 0, 91, 60, 175, 151, 118])
      ),
      0
    )
  ) {
    return CpAmmInstruction.CreateTokenBadge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([188, 50, 249, 165, 93, 151, 38, 63])
      ),
      0
    )
  ) {
    return CpAmmInstruction.FundReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 161, 241, 24, 189, 221, 180, 2])
      ),
      0
    )
  ) {
    return CpAmmInstruction.InitializeCustomizablePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 180, 10, 172, 84, 174, 232, 40])
      ),
      0
    )
  ) {
    return CpAmmInstruction.InitializePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 82, 72, 197, 253, 252, 68, 15])
      ),
      0
    )
  ) {
    return CpAmmInstruction.InitializePoolWithDynamicConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 135, 192, 196, 242, 129, 230, 68])
      ),
      0
    )
  ) {
    return CpAmmInstruction.InitializeReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 62, 2, 252, 247, 10, 171, 185])
      ),
      0
    )
  ) {
    return CpAmmInstruction.LockPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([165, 176, 125, 6, 231, 171, 186, 213])
      ),
      0
    )
  ) {
    return CpAmmInstruction.PermanentLockPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 94, 216, 14, 116, 204, 247, 0])
      ),
      0
    )
  ) {
    return CpAmmInstruction.RefreshVesting;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 51, 61, 35, 112, 105, 24, 85])
      ),
      0
    )
  ) {
    return CpAmmInstruction.RemoveAllLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 85, 209, 72, 24, 206, 177, 108])
      ),
      0
    )
  ) {
    return CpAmmInstruction.RemoveLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([112, 87, 135, 223, 83, 204, 132, 53])
      ),
      0
    )
  ) {
    return CpAmmInstruction.SetPoolStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 241, 221, 138, 161, 29, 253, 42])
      ),
      0
    )
  ) {
    return CpAmmInstruction.SplitPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 198, 158, 145, 225, 117, 135, 200])
      ),
      0
    )
  ) {
    return CpAmmInstruction.Swap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 174, 196, 169, 213, 235, 254, 107])
      ),
      0
    )
  ) {
    return CpAmmInstruction.UpdateRewardDuration;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 28, 48, 32, 215, 160, 35, 23])
      ),
      0
    )
  ) {
    return CpAmmInstruction.UpdateRewardFunder;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([148, 206, 42, 195, 247, 49, 103, 8])
      ),
      0
    )
  ) {
    return CpAmmInstruction.WithdrawIneligibleReward;
  }
  throw new Error(
    'The provided instruction could not be identified as a cpAmm instruction.'
  );
}

export type ParsedCpAmmInstruction<
  TProgram extends string = 'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG',
> =
  | ({
      instructionType: CpAmmInstruction.AddLiquidity;
    } & ParsedAddLiquidityInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.ClaimPartnerFee;
    } & ParsedClaimPartnerFeeInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.ClaimPositionFee;
    } & ParsedClaimPositionFeeInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.ClaimProtocolFee;
    } & ParsedClaimProtocolFeeInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.ClaimReward;
    } & ParsedClaimRewardInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CloseClaimFeeOperator;
    } & ParsedCloseClaimFeeOperatorInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CloseConfig;
    } & ParsedCloseConfigInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.ClosePosition;
    } & ParsedClosePositionInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CloseTokenBadge;
    } & ParsedCloseTokenBadgeInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CreateClaimFeeOperator;
    } & ParsedCreateClaimFeeOperatorInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CreateConfig;
    } & ParsedCreateConfigInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CreateDynamicConfig;
    } & ParsedCreateDynamicConfigInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CreatePosition;
    } & ParsedCreatePositionInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.CreateTokenBadge;
    } & ParsedCreateTokenBadgeInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.FundReward;
    } & ParsedFundRewardInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.InitializeCustomizablePool;
    } & ParsedInitializeCustomizablePoolInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.InitializePool;
    } & ParsedInitializePoolInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.InitializePoolWithDynamicConfig;
    } & ParsedInitializePoolWithDynamicConfigInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.InitializeReward;
    } & ParsedInitializeRewardInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.LockPosition;
    } & ParsedLockPositionInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.PermanentLockPosition;
    } & ParsedPermanentLockPositionInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.RefreshVesting;
    } & ParsedRefreshVestingInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.RemoveAllLiquidity;
    } & ParsedRemoveAllLiquidityInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.RemoveLiquidity;
    } & ParsedRemoveLiquidityInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.SetPoolStatus;
    } & ParsedSetPoolStatusInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.SplitPosition;
    } & ParsedSplitPositionInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.Swap;
    } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.UpdateRewardDuration;
    } & ParsedUpdateRewardDurationInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.UpdateRewardFunder;
    } & ParsedUpdateRewardFunderInstruction<TProgram>)
  | ({
      instructionType: CpAmmInstruction.WithdrawIneligibleReward;
    } & ParsedWithdrawIneligibleRewardInstruction<TProgram>);
