/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getPoolFeeParametersDecoder,
  getPoolFeeParametersEncoder,
  type PoolFeeParameters,
  type PoolFeeParametersArgs,
} from '.';

export type EvtInitializePool = {
  pool: Address;
  tokenAMint: Address;
  tokenBMint: Address;
  creator: Address;
  payer: Address;
  alphaVault: Address;
  poolFees: PoolFeeParameters;
  sqrtMinPrice: bigint;
  sqrtMaxPrice: bigint;
  activationType: number;
  collectFeeMode: number;
  liquidity: bigint;
  sqrtPrice: bigint;
  activationPoint: bigint;
  tokenAFlag: number;
  tokenBFlag: number;
  tokenAAmount: bigint;
  tokenBAmount: bigint;
  totalAmountA: bigint;
  totalAmountB: bigint;
  poolType: number;
};

export type EvtInitializePoolArgs = {
  pool: Address;
  tokenAMint: Address;
  tokenBMint: Address;
  creator: Address;
  payer: Address;
  alphaVault: Address;
  poolFees: PoolFeeParametersArgs;
  sqrtMinPrice: number | bigint;
  sqrtMaxPrice: number | bigint;
  activationType: number;
  collectFeeMode: number;
  liquidity: number | bigint;
  sqrtPrice: number | bigint;
  activationPoint: number | bigint;
  tokenAFlag: number;
  tokenBFlag: number;
  tokenAAmount: number | bigint;
  tokenBAmount: number | bigint;
  totalAmountA: number | bigint;
  totalAmountB: number | bigint;
  poolType: number;
};

export function getEvtInitializePoolEncoder(): Encoder<EvtInitializePoolArgs> {
  return getStructEncoder([
    ['pool', getAddressEncoder()],
    ['tokenAMint', getAddressEncoder()],
    ['tokenBMint', getAddressEncoder()],
    ['creator', getAddressEncoder()],
    ['payer', getAddressEncoder()],
    ['alphaVault', getAddressEncoder()],
    ['poolFees', getPoolFeeParametersEncoder()],
    ['sqrtMinPrice', getU128Encoder()],
    ['sqrtMaxPrice', getU128Encoder()],
    ['activationType', getU8Encoder()],
    ['collectFeeMode', getU8Encoder()],
    ['liquidity', getU128Encoder()],
    ['sqrtPrice', getU128Encoder()],
    ['activationPoint', getU64Encoder()],
    ['tokenAFlag', getU8Encoder()],
    ['tokenBFlag', getU8Encoder()],
    ['tokenAAmount', getU64Encoder()],
    ['tokenBAmount', getU64Encoder()],
    ['totalAmountA', getU64Encoder()],
    ['totalAmountB', getU64Encoder()],
    ['poolType', getU8Encoder()],
  ]);
}

export function getEvtInitializePoolDecoder(): Decoder<EvtInitializePool> {
  return getStructDecoder([
    ['pool', getAddressDecoder()],
    ['tokenAMint', getAddressDecoder()],
    ['tokenBMint', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['payer', getAddressDecoder()],
    ['alphaVault', getAddressDecoder()],
    ['poolFees', getPoolFeeParametersDecoder()],
    ['sqrtMinPrice', getU128Decoder()],
    ['sqrtMaxPrice', getU128Decoder()],
    ['activationType', getU8Decoder()],
    ['collectFeeMode', getU8Decoder()],
    ['liquidity', getU128Decoder()],
    ['sqrtPrice', getU128Decoder()],
    ['activationPoint', getU64Decoder()],
    ['tokenAFlag', getU8Decoder()],
    ['tokenBFlag', getU8Decoder()],
    ['tokenAAmount', getU64Decoder()],
    ['tokenBAmount', getU64Decoder()],
    ['totalAmountA', getU64Decoder()],
    ['totalAmountB', getU64Decoder()],
    ['poolType', getU8Decoder()],
  ]);
}

export function getEvtInitializePoolCodec(): Codec<
  EvtInitializePoolArgs,
  EvtInitializePool
> {
  return combineCodec(
    getEvtInitializePoolEncoder(),
    getEvtInitializePoolDecoder()
  );
}
