/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type SplitPositionParameters = {
  /** Percentage of unlocked liquidity to split to the second position */
  unlockedLiquidityPercentage: number;
  /** Percentage of permanent locked liquidity to split to the second position */
  permanentLockedLiquidityPercentage: number;
  /** Percentage of fee A pending to split to the second position */
  feeAPercentage: number;
  /** Percentage of fee B pending to split to the second position */
  feeBPercentage: number;
  /** Percentage of reward 0 pending to split to the second position */
  reward0Percentage: number;
  /** Percentage of reward 1 pending to split to the second position */
  reward1Percentage: number;
  /** padding for future */
  padding: ReadonlyUint8Array;
};

export type SplitPositionParametersArgs = SplitPositionParameters;

export function getSplitPositionParametersEncoder(): FixedSizeEncoder<SplitPositionParametersArgs> {
  return getStructEncoder([
    ['unlockedLiquidityPercentage', getU8Encoder()],
    ['permanentLockedLiquidityPercentage', getU8Encoder()],
    ['feeAPercentage', getU8Encoder()],
    ['feeBPercentage', getU8Encoder()],
    ['reward0Percentage', getU8Encoder()],
    ['reward1Percentage', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 16)],
  ]);
}

export function getSplitPositionParametersDecoder(): FixedSizeDecoder<SplitPositionParameters> {
  return getStructDecoder([
    ['unlockedLiquidityPercentage', getU8Decoder()],
    ['permanentLockedLiquidityPercentage', getU8Decoder()],
    ['feeAPercentage', getU8Decoder()],
    ['feeBPercentage', getU8Decoder()],
    ['reward0Percentage', getU8Decoder()],
    ['reward1Percentage', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 16)],
  ]);
}

export function getSplitPositionParametersCodec(): FixedSizeCodec<
  SplitPositionParametersArgs,
  SplitPositionParameters
> {
  return combineCodec(
    getSplitPositionParametersEncoder(),
    getSplitPositionParametersDecoder()
  );
}
