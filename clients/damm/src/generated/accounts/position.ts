/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getPositionMetricsDecoder,
  getPositionMetricsEncoder,
  getUserRewardInfoDecoder,
  getUserRewardInfoEncoder,
  type PositionMetrics,
  type PositionMetricsArgs,
  type UserRewardInfo,
  type UserRewardInfoArgs,
} from '../types';

export const POSITION_DISCRIMINATOR = new Uint8Array([
  170, 188, 143, 228, 122, 64, 247, 208,
]);

export function getPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POSITION_DISCRIMINATOR);
}

export type Position = {
  discriminator: ReadonlyUint8Array;
  pool: Address;
  /** nft mint */
  nftMint: Address;
  /** fee a checkpoint */
  feeAPerTokenCheckpoint: ReadonlyUint8Array;
  /** fee b checkpoint */
  feeBPerTokenCheckpoint: ReadonlyUint8Array;
  /** fee a pending */
  feeAPending: bigint;
  /** fee b pending */
  feeBPending: bigint;
  /** unlock liquidity */
  unlockedLiquidity: bigint;
  /** vesting liquidity */
  vestedLiquidity: bigint;
  /** permanent locked liquidity */
  permanentLockedLiquidity: bigint;
  /** metrics */
  metrics: PositionMetrics;
  /** Farming reward information */
  rewardInfos: Array<UserRewardInfo>;
  /** padding for future usage */
  padding: Array<bigint>;
};

export type PositionArgs = {
  pool: Address;
  /** nft mint */
  nftMint: Address;
  /** fee a checkpoint */
  feeAPerTokenCheckpoint: ReadonlyUint8Array;
  /** fee b checkpoint */
  feeBPerTokenCheckpoint: ReadonlyUint8Array;
  /** fee a pending */
  feeAPending: number | bigint;
  /** fee b pending */
  feeBPending: number | bigint;
  /** unlock liquidity */
  unlockedLiquidity: number | bigint;
  /** vesting liquidity */
  vestedLiquidity: number | bigint;
  /** permanent locked liquidity */
  permanentLockedLiquidity: number | bigint;
  /** metrics */
  metrics: PositionMetricsArgs;
  /** Farming reward information */
  rewardInfos: Array<UserRewardInfoArgs>;
  /** padding for future usage */
  padding: Array<number | bigint>;
};

export function getPositionEncoder(): FixedSizeEncoder<PositionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['pool', getAddressEncoder()],
      ['nftMint', getAddressEncoder()],
      ['feeAPerTokenCheckpoint', fixEncoderSize(getBytesEncoder(), 32)],
      ['feeBPerTokenCheckpoint', fixEncoderSize(getBytesEncoder(), 32)],
      ['feeAPending', getU64Encoder()],
      ['feeBPending', getU64Encoder()],
      ['unlockedLiquidity', getU128Encoder()],
      ['vestedLiquidity', getU128Encoder()],
      ['permanentLockedLiquidity', getU128Encoder()],
      ['metrics', getPositionMetricsEncoder()],
      ['rewardInfos', getArrayEncoder(getUserRewardInfoEncoder(), { size: 2 })],
      ['padding', getArrayEncoder(getU128Encoder(), { size: 6 })],
    ]),
    (value) => ({ ...value, discriminator: POSITION_DISCRIMINATOR })
  );
}

export function getPositionDecoder(): FixedSizeDecoder<Position> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['pool', getAddressDecoder()],
    ['nftMint', getAddressDecoder()],
    ['feeAPerTokenCheckpoint', fixDecoderSize(getBytesDecoder(), 32)],
    ['feeBPerTokenCheckpoint', fixDecoderSize(getBytesDecoder(), 32)],
    ['feeAPending', getU64Decoder()],
    ['feeBPending', getU64Decoder()],
    ['unlockedLiquidity', getU128Decoder()],
    ['vestedLiquidity', getU128Decoder()],
    ['permanentLockedLiquidity', getU128Decoder()],
    ['metrics', getPositionMetricsDecoder()],
    ['rewardInfos', getArrayDecoder(getUserRewardInfoDecoder(), { size: 2 })],
    ['padding', getArrayDecoder(getU128Decoder(), { size: 6 })],
  ]);
}

export function getPositionCodec(): FixedSizeCodec<PositionArgs, Position> {
  return combineCodec(getPositionEncoder(), getPositionDecoder());
}

export function decodePosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Position, TAddress>;
export function decodePosition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Position, TAddress>;
export function decodePosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Position, TAddress> | MaybeAccount<Position, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPositionDecoder()
  );
}

export async function fetchPosition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Position, TAddress>> {
  const maybeAccount = await fetchMaybePosition(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePosition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Position, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePosition(maybeAccount);
}

export async function fetchAllPosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Position>[]> {
  const maybeAccounts = await fetchAllMaybePosition(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Position>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePosition(maybeAccount));
}

export function getPositionSize(): number {
  return 408;
}
