/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const VESTING_DISCRIMINATOR = new Uint8Array([
  100, 149, 66, 138, 95, 200, 128, 241,
]);

export function getVestingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VESTING_DISCRIMINATOR);
}

export type Vesting = {
  discriminator: ReadonlyUint8Array;
  position: Address;
  cliffPoint: bigint;
  periodFrequency: bigint;
  cliffUnlockLiquidity: bigint;
  liquidityPerPeriod: bigint;
  totalReleasedLiquidity: bigint;
  numberOfPeriod: number;
  padding: ReadonlyUint8Array;
  padding2: Array<bigint>;
};

export type VestingArgs = {
  position: Address;
  cliffPoint: number | bigint;
  periodFrequency: number | bigint;
  cliffUnlockLiquidity: number | bigint;
  liquidityPerPeriod: number | bigint;
  totalReleasedLiquidity: number | bigint;
  numberOfPeriod: number;
  padding: ReadonlyUint8Array;
  padding2: Array<number | bigint>;
};

export function getVestingEncoder(): FixedSizeEncoder<VestingArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['position', getAddressEncoder()],
      ['cliffPoint', getU64Encoder()],
      ['periodFrequency', getU64Encoder()],
      ['cliffUnlockLiquidity', getU128Encoder()],
      ['liquidityPerPeriod', getU128Encoder()],
      ['totalReleasedLiquidity', getU128Encoder()],
      ['numberOfPeriod', getU16Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 14)],
      ['padding2', getArrayEncoder(getU128Encoder(), { size: 4 })],
    ]),
    (value) => ({ ...value, discriminator: VESTING_DISCRIMINATOR })
  );
}

export function getVestingDecoder(): FixedSizeDecoder<Vesting> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['position', getAddressDecoder()],
    ['cliffPoint', getU64Decoder()],
    ['periodFrequency', getU64Decoder()],
    ['cliffUnlockLiquidity', getU128Decoder()],
    ['liquidityPerPeriod', getU128Decoder()],
    ['totalReleasedLiquidity', getU128Decoder()],
    ['numberOfPeriod', getU16Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 14)],
    ['padding2', getArrayDecoder(getU128Decoder(), { size: 4 })],
  ]);
}

export function getVestingCodec(): FixedSizeCodec<VestingArgs, Vesting> {
  return combineCodec(getVestingEncoder(), getVestingDecoder());
}

export function decodeVesting<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Vesting, TAddress>;
export function decodeVesting<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Vesting, TAddress>;
export function decodeVesting<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Vesting, TAddress> | MaybeAccount<Vesting, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVestingDecoder()
  );
}

export async function fetchVesting<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Vesting, TAddress>> {
  const maybeAccount = await fetchMaybeVesting(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVesting<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Vesting, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVesting(maybeAccount);
}

export async function fetchAllVesting(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Vesting>[]> {
  const maybeAccounts = await fetchAllMaybeVesting(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVesting(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Vesting>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVesting(maybeAccount));
}

export function getVestingSize(): number {
  return 184;
}
