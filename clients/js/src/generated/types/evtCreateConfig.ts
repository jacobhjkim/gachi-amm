/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/** Create config */
export type EvtCreateConfig = {
  config: Address;
  baseTokenFlag: number;
  quoteTokenFlag: number;
  baseDecimal: number;
  quoteDecimal: number;
  quoteMint: Address;
  feeBasisPoints: number;
  l1ReferralFeeBasisPoints: number;
  l2ReferralFeeBasisPoints: number;
  l3ReferralFeeBasisPoints: number;
  creatorFeeBasisPoints: number;
  migrationFeeBasisPoints: number;
  feeClaimer: Address;
  migrationBaseThreshold: bigint;
  migrationQuoteThreshold: bigint;
  initialVirtualQuoteReserve: bigint;
  initialVirtualBaseReserve: bigint;
};

export type EvtCreateConfigArgs = {
  config: Address;
  baseTokenFlag: number;
  quoteTokenFlag: number;
  baseDecimal: number;
  quoteDecimal: number;
  quoteMint: Address;
  feeBasisPoints: number;
  l1ReferralFeeBasisPoints: number;
  l2ReferralFeeBasisPoints: number;
  l3ReferralFeeBasisPoints: number;
  creatorFeeBasisPoints: number;
  migrationFeeBasisPoints: number;
  feeClaimer: Address;
  migrationBaseThreshold: number | bigint;
  migrationQuoteThreshold: number | bigint;
  initialVirtualQuoteReserve: number | bigint;
  initialVirtualBaseReserve: number | bigint;
};

export function getEvtCreateConfigEncoder(): FixedSizeEncoder<EvtCreateConfigArgs> {
  return getStructEncoder([
    ['config', getAddressEncoder()],
    ['baseTokenFlag', getU8Encoder()],
    ['quoteTokenFlag', getU8Encoder()],
    ['baseDecimal', getU8Encoder()],
    ['quoteDecimal', getU8Encoder()],
    ['quoteMint', getAddressEncoder()],
    ['feeBasisPoints', getU16Encoder()],
    ['l1ReferralFeeBasisPoints', getU16Encoder()],
    ['l2ReferralFeeBasisPoints', getU16Encoder()],
    ['l3ReferralFeeBasisPoints', getU16Encoder()],
    ['creatorFeeBasisPoints', getU16Encoder()],
    ['migrationFeeBasisPoints', getU16Encoder()],
    ['feeClaimer', getAddressEncoder()],
    ['migrationBaseThreshold', getU64Encoder()],
    ['migrationQuoteThreshold', getU64Encoder()],
    ['initialVirtualQuoteReserve', getU64Encoder()],
    ['initialVirtualBaseReserve', getU64Encoder()],
  ]);
}

export function getEvtCreateConfigDecoder(): FixedSizeDecoder<EvtCreateConfig> {
  return getStructDecoder([
    ['config', getAddressDecoder()],
    ['baseTokenFlag', getU8Decoder()],
    ['quoteTokenFlag', getU8Decoder()],
    ['baseDecimal', getU8Decoder()],
    ['quoteDecimal', getU8Decoder()],
    ['quoteMint', getAddressDecoder()],
    ['feeBasisPoints', getU16Decoder()],
    ['l1ReferralFeeBasisPoints', getU16Decoder()],
    ['l2ReferralFeeBasisPoints', getU16Decoder()],
    ['l3ReferralFeeBasisPoints', getU16Decoder()],
    ['creatorFeeBasisPoints', getU16Decoder()],
    ['migrationFeeBasisPoints', getU16Decoder()],
    ['feeClaimer', getAddressDecoder()],
    ['migrationBaseThreshold', getU64Decoder()],
    ['migrationQuoteThreshold', getU64Decoder()],
    ['initialVirtualQuoteReserve', getU64Decoder()],
    ['initialVirtualBaseReserve', getU64Decoder()],
  ]);
}

export function getEvtCreateConfigCodec(): FixedSizeCodec<
  EvtCreateConfigArgs,
  EvtCreateConfig
> {
  return combineCodec(getEvtCreateConfigEncoder(), getEvtCreateConfigDecoder());
}
