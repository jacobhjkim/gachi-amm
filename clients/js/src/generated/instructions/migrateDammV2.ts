/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MIGRATE_DAMM_V2_DISCRIMINATOR = new Uint8Array([
  240, 234, 220, 49, 150, 233, 1, 60,
]);

export function getMigrateDammV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MIGRATE_DAMM_V2_DISCRIMINATOR
  );
}

export type MigrateDammV2Instruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountCurve extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountCurveAuthority extends
    | string
    | AccountMeta<string> = '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr',
  TAccountMigrationAuthority extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountFirstPositionNftMint extends string | AccountMeta<string> = string,
  TAccountFirstPositionNftAccount extends string | AccountMeta<string> = string,
  TAccountFirstPosition extends string | AccountMeta<string> = string,
  TAccountSecondPositionNftMint extends string | AccountMeta<string> = string,
  TAccountSecondPositionNftAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountSecondPosition extends string | AccountMeta<string> = string,
  TAccountDammPoolAuthority extends string | AccountMeta<string> = string,
  TAccountAmmProgram extends
    | string
    | AccountMeta<string> = 'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG',
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenBVault extends string | AccountMeta<string> = string,
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountTokenBaseProgram extends string | AccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | AccountMeta<string> = string,
  TAccountToken2022Program extends string | AccountMeta<string> = string,
  TAccountDammEventAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCurve extends string
        ? WritableAccount<TAccountCurve>
        : TAccountCurve,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountCurveAuthority extends string
        ? WritableAccount<TAccountCurveAuthority>
        : TAccountCurveAuthority,
      TAccountMigrationAuthority extends string
        ? WritableSignerAccount<TAccountMigrationAuthority> &
            AccountSignerMeta<TAccountMigrationAuthority>
        : TAccountMigrationAuthority,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountFirstPositionNftMint extends string
        ? WritableSignerAccount<TAccountFirstPositionNftMint> &
            AccountSignerMeta<TAccountFirstPositionNftMint>
        : TAccountFirstPositionNftMint,
      TAccountFirstPositionNftAccount extends string
        ? WritableAccount<TAccountFirstPositionNftAccount>
        : TAccountFirstPositionNftAccount,
      TAccountFirstPosition extends string
        ? WritableAccount<TAccountFirstPosition>
        : TAccountFirstPosition,
      TAccountSecondPositionNftMint extends string
        ? WritableSignerAccount<TAccountSecondPositionNftMint> &
            AccountSignerMeta<TAccountSecondPositionNftMint>
        : TAccountSecondPositionNftMint,
      TAccountSecondPositionNftAccount extends string
        ? WritableAccount<TAccountSecondPositionNftAccount>
        : TAccountSecondPositionNftAccount,
      TAccountSecondPosition extends string
        ? WritableAccount<TAccountSecondPosition>
        : TAccountSecondPosition,
      TAccountDammPoolAuthority extends string
        ? ReadonlyAccount<TAccountDammPoolAuthority>
        : TAccountDammPoolAuthority,
      TAccountAmmProgram extends string
        ? ReadonlyAccount<TAccountAmmProgram>
        : TAccountAmmProgram,
      TAccountBaseMint extends string
        ? WritableAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? WritableAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountTokenAVault extends string
        ? WritableAccount<TAccountTokenAVault>
        : TAccountTokenAVault,
      TAccountTokenBVault extends string
        ? WritableAccount<TAccountTokenBVault>
        : TAccountTokenBVault,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountTokenBaseProgram extends string
        ? ReadonlyAccount<TAccountTokenBaseProgram>
        : TAccountTokenBaseProgram,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountDammEventAuthority extends string
        ? ReadonlyAccount<TAccountDammEventAuthority>
        : TAccountDammEventAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MigrateDammV2InstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MigrateDammV2InstructionDataArgs = {};

export function getMigrateDammV2InstructionDataEncoder(): FixedSizeEncoder<MigrateDammV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MIGRATE_DAMM_V2_DISCRIMINATOR })
  );
}

export function getMigrateDammV2InstructionDataDecoder(): FixedSizeDecoder<MigrateDammV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMigrateDammV2InstructionDataCodec(): FixedSizeCodec<
  MigrateDammV2InstructionDataArgs,
  MigrateDammV2InstructionData
> {
  return combineCodec(
    getMigrateDammV2InstructionDataEncoder(),
    getMigrateDammV2InstructionDataDecoder()
  );
}

export type MigrateDammV2AsyncInput<
  TAccountCurve extends string = string,
  TAccountConfig extends string = string,
  TAccountCurveAuthority extends string = string,
  TAccountMigrationAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountFirstPositionNftMint extends string = string,
  TAccountFirstPositionNftAccount extends string = string,
  TAccountFirstPosition extends string = string,
  TAccountSecondPositionNftMint extends string = string,
  TAccountSecondPositionNftAccount extends string = string,
  TAccountSecondPosition extends string = string,
  TAccountDammPoolAuthority extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountDammEventAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** bonding curve */
  curve: Address<TAccountCurve>;
  /** bonding curve config key */
  config: Address<TAccountConfig>;
  curveAuthority?: Address<TAccountCurveAuthority>;
  /** migration authority */
  migrationAuthority: TransactionSigner<TAccountMigrationAuthority>;
  pool: Address<TAccountPool>;
  firstPositionNftMint: TransactionSigner<TAccountFirstPositionNftMint>;
  firstPositionNftAccount: Address<TAccountFirstPositionNftAccount>;
  firstPosition: Address<TAccountFirstPosition>;
  secondPositionNftMint?: TransactionSigner<TAccountSecondPositionNftMint>;
  secondPositionNftAccount?: Address<TAccountSecondPositionNftAccount>;
  secondPosition?: Address<TAccountSecondPosition>;
  dammPoolAuthority: Address<TAccountDammPoolAuthority>;
  ammProgram?: Address<TAccountAmmProgram>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  tokenAVault: Address<TAccountTokenAVault>;
  tokenBVault: Address<TAccountTokenBVault>;
  baseVault: Address<TAccountBaseVault>;
  quoteVault: Address<TAccountQuoteVault>;
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  token2022Program: Address<TAccountToken2022Program>;
  dammEventAuthority: Address<TAccountDammEventAuthority>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getMigrateDammV2InstructionAsync<
  TAccountCurve extends string,
  TAccountConfig extends string,
  TAccountCurveAuthority extends string,
  TAccountMigrationAuthority extends string,
  TAccountPool extends string,
  TAccountFirstPositionNftMint extends string,
  TAccountFirstPositionNftAccount extends string,
  TAccountFirstPosition extends string,
  TAccountSecondPositionNftMint extends string,
  TAccountSecondPositionNftAccount extends string,
  TAccountSecondPosition extends string,
  TAccountDammPoolAuthority extends string,
  TAccountAmmProgram extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountToken2022Program extends string,
  TAccountDammEventAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: MigrateDammV2AsyncInput<
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountMigrationAuthority,
    TAccountPool,
    TAccountFirstPositionNftMint,
    TAccountFirstPositionNftAccount,
    TAccountFirstPosition,
    TAccountSecondPositionNftMint,
    TAccountSecondPositionNftAccount,
    TAccountSecondPosition,
    TAccountDammPoolAuthority,
    TAccountAmmProgram,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountToken2022Program,
    TAccountDammEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MigrateDammV2Instruction<
    TProgramAddress,
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountMigrationAuthority,
    TAccountPool,
    TAccountFirstPositionNftMint,
    TAccountFirstPositionNftAccount,
    TAccountFirstPosition,
    TAccountSecondPositionNftMint,
    TAccountSecondPositionNftAccount,
    TAccountSecondPosition,
    TAccountDammPoolAuthority,
    TAccountAmmProgram,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountToken2022Program,
    TAccountDammEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curve: { value: input.curve ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: true },
    migrationAuthority: {
      value: input.migrationAuthority ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: true },
    firstPositionNftMint: {
      value: input.firstPositionNftMint ?? null,
      isWritable: true,
    },
    firstPositionNftAccount: {
      value: input.firstPositionNftAccount ?? null,
      isWritable: true,
    },
    firstPosition: { value: input.firstPosition ?? null, isWritable: true },
    secondPositionNftMint: {
      value: input.secondPositionNftMint ?? null,
      isWritable: true,
    },
    secondPositionNftAccount: {
      value: input.secondPositionNftAccount ?? null,
      isWritable: true,
    },
    secondPosition: { value: input.secondPosition ?? null, isWritable: true },
    dammPoolAuthority: {
      value: input.dammPoolAuthority ?? null,
      isWritable: false,
    },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    dammEventAuthority: {
      value: input.dammEventAuthority ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG' as Address<'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.migrationAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.firstPositionNftMint),
      getAccountMeta(accounts.firstPositionNftAccount),
      getAccountMeta(accounts.firstPosition),
      getAccountMeta(accounts.secondPositionNftMint),
      getAccountMeta(accounts.secondPositionNftAccount),
      getAccountMeta(accounts.secondPosition),
      getAccountMeta(accounts.dammPoolAuthority),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.dammEventAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getMigrateDammV2InstructionDataEncoder().encode({}),
    programAddress,
  } as MigrateDammV2Instruction<
    TProgramAddress,
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountMigrationAuthority,
    TAccountPool,
    TAccountFirstPositionNftMint,
    TAccountFirstPositionNftAccount,
    TAccountFirstPosition,
    TAccountSecondPositionNftMint,
    TAccountSecondPositionNftAccount,
    TAccountSecondPosition,
    TAccountDammPoolAuthority,
    TAccountAmmProgram,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountToken2022Program,
    TAccountDammEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type MigrateDammV2Input<
  TAccountCurve extends string = string,
  TAccountConfig extends string = string,
  TAccountCurveAuthority extends string = string,
  TAccountMigrationAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountFirstPositionNftMint extends string = string,
  TAccountFirstPositionNftAccount extends string = string,
  TAccountFirstPosition extends string = string,
  TAccountSecondPositionNftMint extends string = string,
  TAccountSecondPositionNftAccount extends string = string,
  TAccountSecondPosition extends string = string,
  TAccountDammPoolAuthority extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountDammEventAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** bonding curve */
  curve: Address<TAccountCurve>;
  /** bonding curve config key */
  config: Address<TAccountConfig>;
  curveAuthority?: Address<TAccountCurveAuthority>;
  /** migration authority */
  migrationAuthority: TransactionSigner<TAccountMigrationAuthority>;
  pool: Address<TAccountPool>;
  firstPositionNftMint: TransactionSigner<TAccountFirstPositionNftMint>;
  firstPositionNftAccount: Address<TAccountFirstPositionNftAccount>;
  firstPosition: Address<TAccountFirstPosition>;
  secondPositionNftMint?: TransactionSigner<TAccountSecondPositionNftMint>;
  secondPositionNftAccount?: Address<TAccountSecondPositionNftAccount>;
  secondPosition?: Address<TAccountSecondPosition>;
  dammPoolAuthority: Address<TAccountDammPoolAuthority>;
  ammProgram?: Address<TAccountAmmProgram>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  tokenAVault: Address<TAccountTokenAVault>;
  tokenBVault: Address<TAccountTokenBVault>;
  baseVault: Address<TAccountBaseVault>;
  quoteVault: Address<TAccountQuoteVault>;
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  token2022Program: Address<TAccountToken2022Program>;
  dammEventAuthority: Address<TAccountDammEventAuthority>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getMigrateDammV2Instruction<
  TAccountCurve extends string,
  TAccountConfig extends string,
  TAccountCurveAuthority extends string,
  TAccountMigrationAuthority extends string,
  TAccountPool extends string,
  TAccountFirstPositionNftMint extends string,
  TAccountFirstPositionNftAccount extends string,
  TAccountFirstPosition extends string,
  TAccountSecondPositionNftMint extends string,
  TAccountSecondPositionNftAccount extends string,
  TAccountSecondPosition extends string,
  TAccountDammPoolAuthority extends string,
  TAccountAmmProgram extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountToken2022Program extends string,
  TAccountDammEventAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: MigrateDammV2Input<
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountMigrationAuthority,
    TAccountPool,
    TAccountFirstPositionNftMint,
    TAccountFirstPositionNftAccount,
    TAccountFirstPosition,
    TAccountSecondPositionNftMint,
    TAccountSecondPositionNftAccount,
    TAccountSecondPosition,
    TAccountDammPoolAuthority,
    TAccountAmmProgram,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountToken2022Program,
    TAccountDammEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MigrateDammV2Instruction<
  TProgramAddress,
  TAccountCurve,
  TAccountConfig,
  TAccountCurveAuthority,
  TAccountMigrationAuthority,
  TAccountPool,
  TAccountFirstPositionNftMint,
  TAccountFirstPositionNftAccount,
  TAccountFirstPosition,
  TAccountSecondPositionNftMint,
  TAccountSecondPositionNftAccount,
  TAccountSecondPosition,
  TAccountDammPoolAuthority,
  TAccountAmmProgram,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountTokenAVault,
  TAccountTokenBVault,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountTokenBaseProgram,
  TAccountTokenQuoteProgram,
  TAccountToken2022Program,
  TAccountDammEventAuthority,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curve: { value: input.curve ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: true },
    migrationAuthority: {
      value: input.migrationAuthority ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: true },
    firstPositionNftMint: {
      value: input.firstPositionNftMint ?? null,
      isWritable: true,
    },
    firstPositionNftAccount: {
      value: input.firstPositionNftAccount ?? null,
      isWritable: true,
    },
    firstPosition: { value: input.firstPosition ?? null, isWritable: true },
    secondPositionNftMint: {
      value: input.secondPositionNftMint ?? null,
      isWritable: true,
    },
    secondPositionNftAccount: {
      value: input.secondPositionNftAccount ?? null,
      isWritable: true,
    },
    secondPosition: { value: input.secondPosition ?? null, isWritable: true },
    dammPoolAuthority: {
      value: input.dammPoolAuthority ?? null,
      isWritable: false,
    },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    dammEventAuthority: {
      value: input.dammEventAuthority ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG' as Address<'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.migrationAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.firstPositionNftMint),
      getAccountMeta(accounts.firstPositionNftAccount),
      getAccountMeta(accounts.firstPosition),
      getAccountMeta(accounts.secondPositionNftMint),
      getAccountMeta(accounts.secondPositionNftAccount),
      getAccountMeta(accounts.secondPosition),
      getAccountMeta(accounts.dammPoolAuthority),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.dammEventAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getMigrateDammV2InstructionDataEncoder().encode({}),
    programAddress,
  } as MigrateDammV2Instruction<
    TProgramAddress,
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountMigrationAuthority,
    TAccountPool,
    TAccountFirstPositionNftMint,
    TAccountFirstPositionNftAccount,
    TAccountFirstPosition,
    TAccountSecondPositionNftMint,
    TAccountSecondPositionNftAccount,
    TAccountSecondPosition,
    TAccountDammPoolAuthority,
    TAccountAmmProgram,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountToken2022Program,
    TAccountDammEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedMigrateDammV2Instruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** bonding curve */
    curve: TAccountMetas[0];
    /** bonding curve config key */
    config: TAccountMetas[1];
    curveAuthority: TAccountMetas[2];
    /** migration authority */
    migrationAuthority: TAccountMetas[3];
    pool: TAccountMetas[4];
    firstPositionNftMint: TAccountMetas[5];
    firstPositionNftAccount: TAccountMetas[6];
    firstPosition: TAccountMetas[7];
    secondPositionNftMint?: TAccountMetas[8] | undefined;
    secondPositionNftAccount?: TAccountMetas[9] | undefined;
    secondPosition?: TAccountMetas[10] | undefined;
    dammPoolAuthority: TAccountMetas[11];
    ammProgram: TAccountMetas[12];
    baseMint: TAccountMetas[13];
    quoteMint: TAccountMetas[14];
    tokenAVault: TAccountMetas[15];
    tokenBVault: TAccountMetas[16];
    baseVault: TAccountMetas[17];
    quoteVault: TAccountMetas[18];
    tokenBaseProgram: TAccountMetas[19];
    tokenQuoteProgram: TAccountMetas[20];
    token2022Program: TAccountMetas[21];
    dammEventAuthority: TAccountMetas[22];
    /** System program. */
    systemProgram: TAccountMetas[23];
    eventAuthority: TAccountMetas[24];
    program: TAccountMetas[25];
  };
  data: MigrateDammV2InstructionData;
};

export function parseMigrateDammV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMigrateDammV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 26) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === AMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      curve: getNextAccount(),
      config: getNextAccount(),
      curveAuthority: getNextAccount(),
      migrationAuthority: getNextAccount(),
      pool: getNextAccount(),
      firstPositionNftMint: getNextAccount(),
      firstPositionNftAccount: getNextAccount(),
      firstPosition: getNextAccount(),
      secondPositionNftMint: getNextOptionalAccount(),
      secondPositionNftAccount: getNextOptionalAccount(),
      secondPosition: getNextOptionalAccount(),
      dammPoolAuthority: getNextAccount(),
      ammProgram: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      tokenAVault: getNextAccount(),
      tokenBVault: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      tokenBaseProgram: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      dammEventAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getMigrateDammV2InstructionDataDecoder().decode(instruction.data),
  };
}
