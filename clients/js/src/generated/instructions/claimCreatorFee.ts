/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_CREATOR_FEE_DISCRIMINATOR = new Uint8Array([
  26, 97, 138, 203, 132, 171, 141, 252,
]);

export function getClaimCreatorFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_CREATOR_FEE_DISCRIMINATOR
  );
}

export type ClaimCreatorFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountCurveAuthority extends
    | string
    | AccountMeta<string> = '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr',
  TAccountCurve extends string | AccountMeta<string> = string,
  TAccountCreatorTokenAccount extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCurveAuthority extends string
        ? ReadonlyAccount<TAccountCurveAuthority>
        : TAccountCurveAuthority,
      TAccountCurve extends string
        ? WritableAccount<TAccountCurve>
        : TAccountCurve,
      TAccountCreatorTokenAccount extends string
        ? WritableAccount<TAccountCreatorTokenAccount>
        : TAccountCreatorTokenAccount,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimCreatorFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimCreatorFeeInstructionDataArgs = {};

export function getClaimCreatorFeeInstructionDataEncoder(): FixedSizeEncoder<ClaimCreatorFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_CREATOR_FEE_DISCRIMINATOR })
  );
}

export function getClaimCreatorFeeInstructionDataDecoder(): FixedSizeDecoder<ClaimCreatorFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimCreatorFeeInstructionDataCodec(): FixedSizeCodec<
  ClaimCreatorFeeInstructionDataArgs,
  ClaimCreatorFeeInstructionData
> {
  return combineCodec(
    getClaimCreatorFeeInstructionDataEncoder(),
    getClaimCreatorFeeInstructionDataDecoder()
  );
}

export type ClaimCreatorFeeAsyncInput<
  TAccountCurveAuthority extends string = string,
  TAccountCurve extends string = string,
  TAccountCreatorTokenAccount extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountCreator extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  curveAuthority?: Address<TAccountCurveAuthority>;
  curve: Address<TAccountCurve>;
  /** Creator's token account to receive the claimed fees */
  creatorTokenAccount?: Address<TAccountCreatorTokenAccount>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  creator: TransactionSigner<TAccountCreator>;
  /** Token quote program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getClaimCreatorFeeInstructionAsync<
  TAccountCurveAuthority extends string,
  TAccountCurve extends string,
  TAccountCreatorTokenAccount extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountCreator extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: ClaimCreatorFeeAsyncInput<
    TAccountCurveAuthority,
    TAccountCurve,
    TAccountCreatorTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountCreator,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimCreatorFeeInstruction<
    TProgramAddress,
    TAccountCurveAuthority,
    TAccountCurve,
    TAccountCreatorTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountCreator,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    creatorTokenAccount: {
      value: input.creatorTokenAccount ?? null,
      isWritable: true,
    },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.creatorTokenAccount.value) {
    accounts.creatorTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenQuoteProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.creatorTokenAccount),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getClaimCreatorFeeInstructionDataEncoder().encode({}),
    programAddress,
  } as ClaimCreatorFeeInstruction<
    TProgramAddress,
    TAccountCurveAuthority,
    TAccountCurve,
    TAccountCreatorTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountCreator,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ClaimCreatorFeeInput<
  TAccountCurveAuthority extends string = string,
  TAccountCurve extends string = string,
  TAccountCreatorTokenAccount extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountCreator extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  curveAuthority?: Address<TAccountCurveAuthority>;
  curve: Address<TAccountCurve>;
  /** Creator's token account to receive the claimed fees */
  creatorTokenAccount: Address<TAccountCreatorTokenAccount>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  creator: TransactionSigner<TAccountCreator>;
  /** Token quote program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getClaimCreatorFeeInstruction<
  TAccountCurveAuthority extends string,
  TAccountCurve extends string,
  TAccountCreatorTokenAccount extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountCreator extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: ClaimCreatorFeeInput<
    TAccountCurveAuthority,
    TAccountCurve,
    TAccountCreatorTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountCreator,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimCreatorFeeInstruction<
  TProgramAddress,
  TAccountCurveAuthority,
  TAccountCurve,
  TAccountCreatorTokenAccount,
  TAccountQuoteVault,
  TAccountQuoteMint,
  TAccountCreator,
  TAccountTokenQuoteProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    creatorTokenAccount: {
      value: input.creatorTokenAccount ?? null,
      isWritable: true,
    },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.creatorTokenAccount),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getClaimCreatorFeeInstructionDataEncoder().encode({}),
    programAddress,
  } as ClaimCreatorFeeInstruction<
    TProgramAddress,
    TAccountCurveAuthority,
    TAccountCurve,
    TAccountCreatorTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountCreator,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedClaimCreatorFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    curveAuthority: TAccountMetas[0];
    curve: TAccountMetas[1];
    /** Creator's token account to receive the claimed fees */
    creatorTokenAccount: TAccountMetas[2];
    /** The vault token account for output token */
    quoteVault: TAccountMetas[3];
    /** The mint of quote token */
    quoteMint: TAccountMetas[4];
    creator: TAccountMetas[5];
    /** Token quote program */
    tokenQuoteProgram: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    eventAuthority: TAccountMetas[9];
    program: TAccountMetas[10];
  };
  data: ClaimCreatorFeeInstructionData;
};

export function parseClaimCreatorFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimCreatorFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      curveAuthority: getNextAccount(),
      curve: getNextAccount(),
      creatorTokenAccount: getNextAccount(),
      quoteVault: getNextAccount(),
      quoteMint: getNextAccount(),
      creator: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimCreatorFeeInstructionDataDecoder().decode(instruction.data),
  };
}
