/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_CURVE_WITH_SPL_TOKEN_DISCRIMINATOR = new Uint8Array([
  35, 73, 32, 72, 218, 39, 199, 228,
]);

export function getCreateCurveWithSplTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CURVE_WITH_SPL_TOKEN_DISCRIMINATOR
  );
}

export type CreateCurveWithSplTokenInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountCurveAuthority extends
    | string
    | AccountMeta<string> = '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr',
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountCurve extends string | AccountMeta<string> = string,
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountTokenQuoteProgram extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountCurveAuthority extends string
        ? ReadonlyAccount<TAccountCurveAuthority>
        : TAccountCurveAuthority,
      TAccountBaseMint extends string
        ? WritableSignerAccount<TAccountBaseMint> &
            AccountSignerMeta<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountCurve extends string
        ? WritableAccount<TAccountCurve>
        : TAccountCurve,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateCurveWithSplTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Name of the token to be created */
  name: string;
  /** Symbol (ticker) of the token to be created */
  symbol: string;
  /** URI for the token metadata */
  uri: string;
  /** 0: project/creator, 1: meme/community, 2: blocked */
  feeType: number;
};

export type CreateCurveWithSplTokenInstructionDataArgs = {
  /** Name of the token to be created */
  name: string;
  /** Symbol (ticker) of the token to be created */
  symbol: string;
  /** URI for the token metadata */
  uri: string;
  /** 0: project/creator, 1: meme/community, 2: blocked */
  feeType: number;
};

export function getCreateCurveWithSplTokenInstructionDataEncoder(): Encoder<CreateCurveWithSplTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['feeType', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_CURVE_WITH_SPL_TOKEN_DISCRIMINATOR,
    })
  );
}

export function getCreateCurveWithSplTokenInstructionDataDecoder(): Decoder<CreateCurveWithSplTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['feeType', getU8Decoder()],
  ]);
}

export function getCreateCurveWithSplTokenInstructionDataCodec(): Codec<
  CreateCurveWithSplTokenInstructionDataArgs,
  CreateCurveWithSplTokenInstructionData
> {
  return combineCodec(
    getCreateCurveWithSplTokenInstructionDataEncoder(),
    getCreateCurveWithSplTokenInstructionDataDecoder()
  );
}

export type CreateCurveWithSplTokenAsyncInput<
  TAccountCreator extends string = string,
  TAccountConfig extends string = string,
  TAccountCurveAuthority extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountCurve extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountMetadata extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Address paying for the bonding curve creation */
  creator: TransactionSigner<TAccountCreator>;
  /** config the boding curve belongs to */
  config: Address<TAccountConfig>;
  curveAuthority?: Address<TAccountCurveAuthority>;
  baseMint: TransactionSigner<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  /** Bonding curve PDA */
  curve: Address<TAccountCurve>;
  /** Base token vault for the curve */
  baseVault?: Address<TAccountBaseVault>;
  /** Quote token vault for the curve */
  quoteVault?: Address<TAccountQuoteVault>;
  metadata: Address<TAccountMetadata>;
  metadataProgram?: Address<TAccountMetadataProgram>;
  /** Program to create mint account and mint tokens */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  name: CreateCurveWithSplTokenInstructionDataArgs['name'];
  symbol: CreateCurveWithSplTokenInstructionDataArgs['symbol'];
  uri: CreateCurveWithSplTokenInstructionDataArgs['uri'];
  feeType: CreateCurveWithSplTokenInstructionDataArgs['feeType'];
};

export async function getCreateCurveWithSplTokenInstructionAsync<
  TAccountCreator extends string,
  TAccountConfig extends string,
  TAccountCurveAuthority extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountCurve extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountMetadata extends string,
  TAccountMetadataProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateCurveWithSplTokenAsyncInput<
    TAccountCreator,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountCurve,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadata,
    TAccountMetadataProgram,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateCurveWithSplTokenInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountCurve,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadata,
    TAccountMetadataProgram,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.baseVault.value) {
    accounts.baseVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.curve.value)),
      ],
    });
  }
  if (!accounts.quoteVault.value) {
    accounts.quoteVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.curve.value)),
      ],
    });
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateCurveWithSplTokenInstructionDataEncoder().encode(
      args as CreateCurveWithSplTokenInstructionDataArgs
    ),
  } as CreateCurveWithSplTokenInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountCurve,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadata,
    TAccountMetadataProgram,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CreateCurveWithSplTokenInput<
  TAccountCreator extends string = string,
  TAccountConfig extends string = string,
  TAccountCurveAuthority extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountCurve extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountMetadata extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Address paying for the bonding curve creation */
  creator: TransactionSigner<TAccountCreator>;
  /** config the boding curve belongs to */
  config: Address<TAccountConfig>;
  curveAuthority?: Address<TAccountCurveAuthority>;
  baseMint: TransactionSigner<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  /** Bonding curve PDA */
  curve: Address<TAccountCurve>;
  /** Base token vault for the curve */
  baseVault: Address<TAccountBaseVault>;
  /** Quote token vault for the curve */
  quoteVault: Address<TAccountQuoteVault>;
  metadata: Address<TAccountMetadata>;
  metadataProgram?: Address<TAccountMetadataProgram>;
  /** Program to create mint account and mint tokens */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  name: CreateCurveWithSplTokenInstructionDataArgs['name'];
  symbol: CreateCurveWithSplTokenInstructionDataArgs['symbol'];
  uri: CreateCurveWithSplTokenInstructionDataArgs['uri'];
  feeType: CreateCurveWithSplTokenInstructionDataArgs['feeType'];
};

export function getCreateCurveWithSplTokenInstruction<
  TAccountCreator extends string,
  TAccountConfig extends string,
  TAccountCurveAuthority extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountCurve extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountMetadata extends string,
  TAccountMetadataProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateCurveWithSplTokenInput<
    TAccountCreator,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountCurve,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadata,
    TAccountMetadataProgram,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateCurveWithSplTokenInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountConfig,
  TAccountCurveAuthority,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountCurve,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountMetadata,
  TAccountMetadataProgram,
  TAccountTokenQuoteProgram,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateCurveWithSplTokenInstructionDataEncoder().encode(
      args as CreateCurveWithSplTokenInstructionDataArgs
    ),
  } as CreateCurveWithSplTokenInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountCurve,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadata,
    TAccountMetadataProgram,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCreateCurveWithSplTokenInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Address paying for the bonding curve creation */
    creator: TAccountMetas[0];
    /** config the boding curve belongs to */
    config: TAccountMetas[1];
    curveAuthority: TAccountMetas[2];
    baseMint: TAccountMetas[3];
    quoteMint: TAccountMetas[4];
    /** Bonding curve PDA */
    curve: TAccountMetas[5];
    /** Base token vault for the curve */
    baseVault: TAccountMetas[6];
    /** Quote token vault for the curve */
    quoteVault: TAccountMetas[7];
    metadata: TAccountMetas[8];
    metadataProgram: TAccountMetas[9];
    /** Program to create mint account and mint tokens */
    tokenQuoteProgram: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
    eventAuthority: TAccountMetas[13];
    program: TAccountMetas[14];
  };
  data: CreateCurveWithSplTokenInstructionData;
};

export function parseCreateCurveWithSplTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateCurveWithSplTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      config: getNextAccount(),
      curveAuthority: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      curve: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      metadata: getNextAccount(),
      metadataProgram: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateCurveWithSplTokenInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
