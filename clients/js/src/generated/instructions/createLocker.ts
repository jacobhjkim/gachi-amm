/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_LOCKER_DISCRIMINATOR = new Uint8Array([
  167, 90, 137, 154, 75, 47, 17, 84,
]);

export function getCreateLockerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_LOCKER_DISCRIMINATOR
  );
}

export type CreateLockerInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountCurve extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountCurveAuthority extends
    | string
    | AccountMeta<string> = '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr',
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountBase extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountEscrow extends string | AccountMeta<string> = string,
  TAccountEscrowToken extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountLockerProgram extends
    | string
    | AccountMeta<string> = 'LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn',
  TAccountLockerEventAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCurve extends string
        ? WritableAccount<TAccountCurve>
        : TAccountCurve,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountCurveAuthority extends string
        ? WritableAccount<TAccountCurveAuthority>
        : TAccountCurveAuthority,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountBaseMint extends string
        ? WritableAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountBase extends string
        ? WritableAccount<TAccountBase>
        : TAccountBase,
      TAccountCreator extends string
        ? ReadonlyAccount<TAccountCreator>
        : TAccountCreator,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountEscrowToken extends string
        ? WritableAccount<TAccountEscrowToken>
        : TAccountEscrowToken,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountLockerProgram extends string
        ? ReadonlyAccount<TAccountLockerProgram>
        : TAccountLockerProgram,
      TAccountLockerEventAuthority extends string
        ? ReadonlyAccount<TAccountLockerEventAuthority>
        : TAccountLockerEventAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateLockerInstructionData = { discriminator: ReadonlyUint8Array };

export type CreateLockerInstructionDataArgs = {};

export function getCreateLockerInstructionDataEncoder(): FixedSizeEncoder<CreateLockerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CREATE_LOCKER_DISCRIMINATOR })
  );
}

export function getCreateLockerInstructionDataDecoder(): FixedSizeDecoder<CreateLockerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreateLockerInstructionDataCodec(): FixedSizeCodec<
  CreateLockerInstructionDataArgs,
  CreateLockerInstructionData
> {
  return combineCodec(
    getCreateLockerInstructionDataEncoder(),
    getCreateLockerInstructionDataDecoder()
  );
}

export type CreateLockerAsyncInput<
  TAccountCurve extends string = string,
  TAccountConfig extends string = string,
  TAccountCurveAuthority extends string = string,
  TAccountBaseVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountBase extends string = string,
  TAccountCreator extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountLockerProgram extends string = string,
  TAccountLockerEventAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Virtual pool */
  curve: Address<TAccountCurve>;
  /** Config */
  config: Address<TAccountConfig>;
  curveAuthority?: Address<TAccountCurveAuthority>;
  baseVault: Address<TAccountBaseVault>;
  baseMint: Address<TAccountBaseMint>;
  base?: Address<TAccountBase>;
  creator: Address<TAccountCreator>;
  escrow: Address<TAccountEscrow>;
  escrowToken: Address<TAccountEscrowToken>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  lockerProgram?: Address<TAccountLockerProgram>;
  lockerEventAuthority: Address<TAccountLockerEventAuthority>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getCreateLockerInstructionAsync<
  TAccountCurve extends string,
  TAccountConfig extends string,
  TAccountCurveAuthority extends string,
  TAccountBaseVault extends string,
  TAccountBaseMint extends string,
  TAccountBase extends string,
  TAccountCreator extends string,
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountLockerProgram extends string,
  TAccountLockerEventAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateLockerAsyncInput<
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseVault,
    TAccountBaseMint,
    TAccountBase,
    TAccountCreator,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountLockerProgram,
    TAccountLockerEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateLockerInstruction<
    TProgramAddress,
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseVault,
    TAccountBaseMint,
    TAccountBase,
    TAccountCreator,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountLockerProgram,
    TAccountLockerEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curve: { value: input.curve ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    lockerProgram: { value: input.lockerProgram ?? null, isWritable: false },
    lockerEventAuthority: {
      value: input.lockerEventAuthority ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.base.value) {
    accounts.base.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 97, 115, 101, 95, 108, 111, 99, 107, 101, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.curve.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.lockerProgram.value) {
    accounts.lockerProgram.value =
      'LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn' as Address<'LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.lockerProgram),
      getAccountMeta(accounts.lockerEventAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateLockerInstructionDataEncoder().encode({}),
  } as CreateLockerInstruction<
    TProgramAddress,
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseVault,
    TAccountBaseMint,
    TAccountBase,
    TAccountCreator,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountLockerProgram,
    TAccountLockerEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CreateLockerInput<
  TAccountCurve extends string = string,
  TAccountConfig extends string = string,
  TAccountCurveAuthority extends string = string,
  TAccountBaseVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountBase extends string = string,
  TAccountCreator extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowToken extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountLockerProgram extends string = string,
  TAccountLockerEventAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Virtual pool */
  curve: Address<TAccountCurve>;
  /** Config */
  config: Address<TAccountConfig>;
  curveAuthority?: Address<TAccountCurveAuthority>;
  baseVault: Address<TAccountBaseVault>;
  baseMint: Address<TAccountBaseMint>;
  base: Address<TAccountBase>;
  creator: Address<TAccountCreator>;
  escrow: Address<TAccountEscrow>;
  escrowToken: Address<TAccountEscrowToken>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  lockerProgram?: Address<TAccountLockerProgram>;
  lockerEventAuthority: Address<TAccountLockerEventAuthority>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getCreateLockerInstruction<
  TAccountCurve extends string,
  TAccountConfig extends string,
  TAccountCurveAuthority extends string,
  TAccountBaseVault extends string,
  TAccountBaseMint extends string,
  TAccountBase extends string,
  TAccountCreator extends string,
  TAccountEscrow extends string,
  TAccountEscrowToken extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountLockerProgram extends string,
  TAccountLockerEventAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateLockerInput<
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseVault,
    TAccountBaseMint,
    TAccountBase,
    TAccountCreator,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountLockerProgram,
    TAccountLockerEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateLockerInstruction<
  TProgramAddress,
  TAccountCurve,
  TAccountConfig,
  TAccountCurveAuthority,
  TAccountBaseVault,
  TAccountBaseMint,
  TAccountBase,
  TAccountCreator,
  TAccountEscrow,
  TAccountEscrowToken,
  TAccountPayer,
  TAccountTokenProgram,
  TAccountLockerProgram,
  TAccountLockerEventAuthority,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curve: { value: input.curve ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowToken: { value: input.escrowToken ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    lockerProgram: { value: input.lockerProgram ?? null, isWritable: false },
    lockerEventAuthority: {
      value: input.lockerEventAuthority ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.lockerProgram.value) {
    accounts.lockerProgram.value =
      'LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn' as Address<'LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowToken),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.lockerProgram),
      getAccountMeta(accounts.lockerEventAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateLockerInstructionDataEncoder().encode({}),
  } as CreateLockerInstruction<
    TProgramAddress,
    TAccountCurve,
    TAccountConfig,
    TAccountCurveAuthority,
    TAccountBaseVault,
    TAccountBaseMint,
    TAccountBase,
    TAccountCreator,
    TAccountEscrow,
    TAccountEscrowToken,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountLockerProgram,
    TAccountLockerEventAuthority,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCreateLockerInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Virtual pool */
    curve: TAccountMetas[0];
    /** Config */
    config: TAccountMetas[1];
    curveAuthority: TAccountMetas[2];
    baseVault: TAccountMetas[3];
    baseMint: TAccountMetas[4];
    base: TAccountMetas[5];
    creator: TAccountMetas[6];
    escrow: TAccountMetas[7];
    escrowToken: TAccountMetas[8];
    payer: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    lockerProgram: TAccountMetas[11];
    lockerEventAuthority: TAccountMetas[12];
    /** System program. */
    systemProgram: TAccountMetas[13];
    eventAuthority: TAccountMetas[14];
    program: TAccountMetas[15];
  };
  data: CreateLockerInstructionData;
};

export function parseCreateLockerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateLockerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      curve: getNextAccount(),
      config: getNextAccount(),
      curveAuthority: getNextAccount(),
      baseVault: getNextAccount(),
      baseMint: getNextAccount(),
      base: getNextAccount(),
      creator: getNextAccount(),
      escrow: getNextAccount(),
      escrowToken: getNextAccount(),
      payer: getNextAccount(),
      tokenProgram: getNextAccount(),
      lockerProgram: getNextAccount(),
      lockerEventAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateLockerInstructionDataDecoder().decode(instruction.data),
  };
}
