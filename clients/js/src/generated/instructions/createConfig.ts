/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  201, 207, 243, 114, 75, 111, 47, 189,
]);

export function getCreateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CONFIG_DISCRIMINATOR
  );
}

export type CreateConfigInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountFeeClaimer extends string | AccountMeta<string> = string,
  TAccountFeeClaimerTokenAccount extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableSignerAccount<TAccountConfig> &
            AccountSignerMeta<TAccountConfig>
        : TAccountConfig,
      TAccountFeeClaimer extends string
        ? ReadonlyAccount<TAccountFeeClaimer>
        : TAccountFeeClaimer,
      TAccountFeeClaimerTokenAccount extends string
        ? WritableAccount<TAccountFeeClaimerTokenAccount>
        : TAccountFeeClaimerTokenAccount,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** token type (0 | 1), 0: SPL Token, 1: Token2022 */
  baseTokenFlag: number;
  /** token decimal, (6 | 9) */
  baseDecimal: number;
  /** Trading fee in bps */
  feeBasisPoints: number;
  /** Level 1 referral fee in bps */
  l1ReferralFeeBasisPoints: number;
  /** Level 2 referral fee in bps */
  l2ReferralFeeBasisPoints: number;
  /** Level 3 referral fee in bps */
  l3ReferralFeeBasisPoints: number;
  /** Referee discount in bps */
  refereeDiscountBasisPoints: number;
  /** creator fee in bps */
  creatorFeeBasisPoints: number;
  /** migration fee in bps (quote token fee) */
  migrationFeeBasisPoints: number;
  /** migration base threshold (the amount of token to migrate) */
  migrationBaseThreshold: bigint;
  /** migration quote threshold */
  migrationQuoteThreshold: bigint;
  /** initial virtual quote reserve to boost the initial liquidity */
  initialVirtualQuoteReserve: bigint;
  /** initial virtual base reserve to boost the initial liquidity */
  initialVirtualBaseReserve: bigint;
};

export type CreateConfigInstructionDataArgs = {
  /** token type (0 | 1), 0: SPL Token, 1: Token2022 */
  baseTokenFlag: number;
  /** token decimal, (6 | 9) */
  baseDecimal: number;
  /** Trading fee in bps */
  feeBasisPoints: number;
  /** Level 1 referral fee in bps */
  l1ReferralFeeBasisPoints: number;
  /** Level 2 referral fee in bps */
  l2ReferralFeeBasisPoints: number;
  /** Level 3 referral fee in bps */
  l3ReferralFeeBasisPoints: number;
  /** Referee discount in bps */
  refereeDiscountBasisPoints: number;
  /** creator fee in bps */
  creatorFeeBasisPoints: number;
  /** migration fee in bps (quote token fee) */
  migrationFeeBasisPoints: number;
  /** migration base threshold (the amount of token to migrate) */
  migrationBaseThreshold: number | bigint;
  /** migration quote threshold */
  migrationQuoteThreshold: number | bigint;
  /** initial virtual quote reserve to boost the initial liquidity */
  initialVirtualQuoteReserve: number | bigint;
  /** initial virtual base reserve to boost the initial liquidity */
  initialVirtualBaseReserve: number | bigint;
};

export function getCreateConfigInstructionDataEncoder(): FixedSizeEncoder<CreateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseTokenFlag', getU8Encoder()],
      ['baseDecimal', getU8Encoder()],
      ['feeBasisPoints', getU16Encoder()],
      ['l1ReferralFeeBasisPoints', getU16Encoder()],
      ['l2ReferralFeeBasisPoints', getU16Encoder()],
      ['l3ReferralFeeBasisPoints', getU16Encoder()],
      ['refereeDiscountBasisPoints', getU16Encoder()],
      ['creatorFeeBasisPoints', getU16Encoder()],
      ['migrationFeeBasisPoints', getU16Encoder()],
      ['migrationBaseThreshold', getU64Encoder()],
      ['migrationQuoteThreshold', getU64Encoder()],
      ['initialVirtualQuoteReserve', getU64Encoder()],
      ['initialVirtualBaseReserve', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CONFIG_DISCRIMINATOR })
  );
}

export function getCreateConfigInstructionDataDecoder(): FixedSizeDecoder<CreateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseTokenFlag', getU8Decoder()],
    ['baseDecimal', getU8Decoder()],
    ['feeBasisPoints', getU16Decoder()],
    ['l1ReferralFeeBasisPoints', getU16Decoder()],
    ['l2ReferralFeeBasisPoints', getU16Decoder()],
    ['l3ReferralFeeBasisPoints', getU16Decoder()],
    ['refereeDiscountBasisPoints', getU16Decoder()],
    ['creatorFeeBasisPoints', getU16Decoder()],
    ['migrationFeeBasisPoints', getU16Decoder()],
    ['migrationBaseThreshold', getU64Decoder()],
    ['migrationQuoteThreshold', getU64Decoder()],
    ['initialVirtualQuoteReserve', getU64Decoder()],
    ['initialVirtualBaseReserve', getU64Decoder()],
  ]);
}

export function getCreateConfigInstructionDataCodec(): FixedSizeCodec<
  CreateConfigInstructionDataArgs,
  CreateConfigInstructionData
> {
  return combineCodec(
    getCreateConfigInstructionDataEncoder(),
    getCreateConfigInstructionDataDecoder()
  );
}

export type CreateConfigAsyncInput<
  TAccountConfig extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountFeeClaimerTokenAccount extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Initialize config state account to store protocol owner address and fee rates. */
  config: TransactionSigner<TAccountConfig>;
  /** fee claimer, doesn't have to be a signer */
  feeClaimer: Address<TAccountFeeClaimer>;
  /** fee claimer token account */
  feeClaimerTokenAccount?: Address<TAccountFeeClaimerTokenAccount>;
  /** quote mint */
  quoteMint: Address<TAccountQuoteMint>;
  /** only admin can create config */
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  baseTokenFlag: CreateConfigInstructionDataArgs['baseTokenFlag'];
  baseDecimal: CreateConfigInstructionDataArgs['baseDecimal'];
  feeBasisPoints: CreateConfigInstructionDataArgs['feeBasisPoints'];
  l1ReferralFeeBasisPoints: CreateConfigInstructionDataArgs['l1ReferralFeeBasisPoints'];
  l2ReferralFeeBasisPoints: CreateConfigInstructionDataArgs['l2ReferralFeeBasisPoints'];
  l3ReferralFeeBasisPoints: CreateConfigInstructionDataArgs['l3ReferralFeeBasisPoints'];
  refereeDiscountBasisPoints: CreateConfigInstructionDataArgs['refereeDiscountBasisPoints'];
  creatorFeeBasisPoints: CreateConfigInstructionDataArgs['creatorFeeBasisPoints'];
  migrationFeeBasisPoints: CreateConfigInstructionDataArgs['migrationFeeBasisPoints'];
  migrationBaseThreshold: CreateConfigInstructionDataArgs['migrationBaseThreshold'];
  migrationQuoteThreshold: CreateConfigInstructionDataArgs['migrationQuoteThreshold'];
  initialVirtualQuoteReserve: CreateConfigInstructionDataArgs['initialVirtualQuoteReserve'];
  initialVirtualBaseReserve: CreateConfigInstructionDataArgs['initialVirtualBaseReserve'];
};

export async function getCreateConfigInstructionAsync<
  TAccountConfig extends string,
  TAccountFeeClaimer extends string,
  TAccountFeeClaimerTokenAccount extends string,
  TAccountQuoteMint extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateConfigAsyncInput<
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    feeClaimerTokenAccount: {
      value: input.feeClaimerTokenAccount ?? null,
      isWritable: true,
    },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.feeClaimerTokenAccount.value) {
    accounts.feeClaimerTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.feeClaimer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.feeClaimerTokenAccount),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCreateConfigInstructionDataEncoder().encode(
      args as CreateConfigInstructionDataArgs
    ),
    programAddress,
  } as CreateConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type CreateConfigInput<
  TAccountConfig extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountFeeClaimerTokenAccount extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Initialize config state account to store protocol owner address and fee rates. */
  config: TransactionSigner<TAccountConfig>;
  /** fee claimer, doesn't have to be a signer */
  feeClaimer: Address<TAccountFeeClaimer>;
  /** fee claimer token account */
  feeClaimerTokenAccount: Address<TAccountFeeClaimerTokenAccount>;
  /** quote mint */
  quoteMint: Address<TAccountQuoteMint>;
  /** only admin can create config */
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  baseTokenFlag: CreateConfigInstructionDataArgs['baseTokenFlag'];
  baseDecimal: CreateConfigInstructionDataArgs['baseDecimal'];
  feeBasisPoints: CreateConfigInstructionDataArgs['feeBasisPoints'];
  l1ReferralFeeBasisPoints: CreateConfigInstructionDataArgs['l1ReferralFeeBasisPoints'];
  l2ReferralFeeBasisPoints: CreateConfigInstructionDataArgs['l2ReferralFeeBasisPoints'];
  l3ReferralFeeBasisPoints: CreateConfigInstructionDataArgs['l3ReferralFeeBasisPoints'];
  refereeDiscountBasisPoints: CreateConfigInstructionDataArgs['refereeDiscountBasisPoints'];
  creatorFeeBasisPoints: CreateConfigInstructionDataArgs['creatorFeeBasisPoints'];
  migrationFeeBasisPoints: CreateConfigInstructionDataArgs['migrationFeeBasisPoints'];
  migrationBaseThreshold: CreateConfigInstructionDataArgs['migrationBaseThreshold'];
  migrationQuoteThreshold: CreateConfigInstructionDataArgs['migrationQuoteThreshold'];
  initialVirtualQuoteReserve: CreateConfigInstructionDataArgs['initialVirtualQuoteReserve'];
  initialVirtualBaseReserve: CreateConfigInstructionDataArgs['initialVirtualBaseReserve'];
};

export function getCreateConfigInstruction<
  TAccountConfig extends string,
  TAccountFeeClaimer extends string,
  TAccountFeeClaimerTokenAccount extends string,
  TAccountQuoteMint extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateConfigInput<
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateConfigInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountFeeClaimer,
  TAccountFeeClaimerTokenAccount,
  TAccountQuoteMint,
  TAccountPayer,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    feeClaimerTokenAccount: {
      value: input.feeClaimerTokenAccount ?? null,
      isWritable: true,
    },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.feeClaimerTokenAccount),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCreateConfigInstructionDataEncoder().encode(
      args as CreateConfigInstructionDataArgs
    ),
    programAddress,
  } as CreateConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedCreateConfigInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Initialize config state account to store protocol owner address and fee rates. */
    config: TAccountMetas[0];
    /** fee claimer, doesn't have to be a signer */
    feeClaimer: TAccountMetas[1];
    /** fee claimer token account */
    feeClaimerTokenAccount: TAccountMetas[2];
    /** quote mint */
    quoteMint: TAccountMetas[3];
    /** only admin can create config */
    payer: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: CreateConfigInstructionData;
};

export function parseCreateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      feeClaimer: getNextAccount(),
      feeClaimerTokenAccount: getNextAccount(),
      quoteMint: getNextAccount(),
      payer: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateConfigInstructionDataDecoder().decode(instruction.data),
  };
}
