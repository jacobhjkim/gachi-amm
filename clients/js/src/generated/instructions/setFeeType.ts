/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_FEE_TYPE_DISCRIMINATOR = new Uint8Array([
  187, 117, 49, 74, 182, 25, 242, 244,
]);

export function getSetFeeTypeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_FEE_TYPE_DISCRIMINATOR
  );
}

export type SetFeeTypeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountCurve extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountCurve extends string
        ? WritableAccount<TAccountCurve>
        : TAccountCurve,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetFeeTypeInstructionData = {
  discriminator: ReadonlyUint8Array;
  newFeeType: number;
};

export type SetFeeTypeInstructionDataArgs = { newFeeType: number };

export function getSetFeeTypeInstructionDataEncoder(): FixedSizeEncoder<SetFeeTypeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newFeeType', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_FEE_TYPE_DISCRIMINATOR })
  );
}

export function getSetFeeTypeInstructionDataDecoder(): FixedSizeDecoder<SetFeeTypeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newFeeType', getU8Decoder()],
  ]);
}

export function getSetFeeTypeInstructionDataCodec(): FixedSizeCodec<
  SetFeeTypeInstructionDataArgs,
  SetFeeTypeInstructionData
> {
  return combineCodec(
    getSetFeeTypeInstructionDataEncoder(),
    getSetFeeTypeInstructionDataDecoder()
  );
}

export type SetFeeTypeAsyncInput<
  TAccountPayer extends string = string,
  TAccountConfig extends string = string,
  TAccountCurve extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** admin who can set the fee type of the bonding curve */
  payer: TransactionSigner<TAccountPayer>;
  /** bonding curve config key */
  config: Address<TAccountConfig>;
  /** bonding curve */
  curve: Address<TAccountCurve>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  newFeeType: SetFeeTypeInstructionDataArgs['newFeeType'];
};

export async function getSetFeeTypeInstructionAsync<
  TAccountPayer extends string,
  TAccountConfig extends string,
  TAccountCurve extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: SetFeeTypeAsyncInput<
    TAccountPayer,
    TAccountConfig,
    TAccountCurve,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetFeeTypeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountConfig,
    TAccountCurve,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSetFeeTypeInstructionDataEncoder().encode(
      args as SetFeeTypeInstructionDataArgs
    ),
  } as SetFeeTypeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountConfig,
    TAccountCurve,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type SetFeeTypeInput<
  TAccountPayer extends string = string,
  TAccountConfig extends string = string,
  TAccountCurve extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** admin who can set the fee type of the bonding curve */
  payer: TransactionSigner<TAccountPayer>;
  /** bonding curve config key */
  config: Address<TAccountConfig>;
  /** bonding curve */
  curve: Address<TAccountCurve>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  newFeeType: SetFeeTypeInstructionDataArgs['newFeeType'];
};

export function getSetFeeTypeInstruction<
  TAccountPayer extends string,
  TAccountConfig extends string,
  TAccountCurve extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: SetFeeTypeInput<
    TAccountPayer,
    TAccountConfig,
    TAccountCurve,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetFeeTypeInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountConfig,
  TAccountCurve,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSetFeeTypeInstructionDataEncoder().encode(
      args as SetFeeTypeInstructionDataArgs
    ),
  } as SetFeeTypeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountConfig,
    TAccountCurve,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedSetFeeTypeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** admin who can set the fee type of the bonding curve */
    payer: TAccountMetas[0];
    /** bonding curve config key */
    config: TAccountMetas[1];
    /** bonding curve */
    curve: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: SetFeeTypeInstructionData;
};

export function parseSetFeeTypeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetFeeTypeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      config: getNextAccount(),
      curve: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSetFeeTypeInstructionDataDecoder().decode(instruction.data),
  };
}
