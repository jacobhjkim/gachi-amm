/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_CASHBACK_TIER_DISCRIMINATOR = new Uint8Array([
  67, 163, 199, 88, 159, 167, 105, 183,
]);

export function getUpdateCashbackTierDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CASHBACK_TIER_DISCRIMINATOR
  );
}

export type UpdateCashbackTierInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountCashbackAccount extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountCashbackAccount extends string
        ? WritableAccount<TAccountCashbackAccount>
        : TAccountCashbackAccount,
      TAccountUser extends string
        ? ReadonlyAccount<TAccountUser>
        : TAccountUser,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateCashbackTierInstructionData = {
  discriminator: ReadonlyUint8Array;
  newTier: number;
};

export type UpdateCashbackTierInstructionDataArgs = { newTier: number };

export function getUpdateCashbackTierInstructionDataEncoder(): FixedSizeEncoder<UpdateCashbackTierInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newTier', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_CASHBACK_TIER_DISCRIMINATOR })
  );
}

export function getUpdateCashbackTierInstructionDataDecoder(): FixedSizeDecoder<UpdateCashbackTierInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newTier', getU8Decoder()],
  ]);
}

export function getUpdateCashbackTierInstructionDataCodec(): FixedSizeCodec<
  UpdateCashbackTierInstructionDataArgs,
  UpdateCashbackTierInstructionData
> {
  return combineCodec(
    getUpdateCashbackTierInstructionDataEncoder(),
    getUpdateCashbackTierInstructionDataDecoder()
  );
}

export type UpdateCashbackTierAsyncInput<
  TAccountAdmin extends string = string,
  TAccountCashbackAccount extends string = string,
  TAccountUser extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Admin who can update tiers */
  admin: TransactionSigner<TAccountAdmin>;
  /** The cashback account to update */
  cashbackAccount?: Address<TAccountCashbackAccount>;
  /** The user whose tier is being updated */
  user: Address<TAccountUser>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  newTier: UpdateCashbackTierInstructionDataArgs['newTier'];
};

export async function getUpdateCashbackTierInstructionAsync<
  TAccountAdmin extends string,
  TAccountCashbackAccount extends string,
  TAccountUser extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: UpdateCashbackTierAsyncInput<
    TAccountAdmin,
    TAccountCashbackAccount,
    TAccountUser,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateCashbackTierInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCashbackAccount,
    TAccountUser,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    cashbackAccount: { value: input.cashbackAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.cashbackAccount.value) {
    accounts.cashbackAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 97, 115, 104, 98, 97, 99, 107])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.cashbackAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getUpdateCashbackTierInstructionDataEncoder().encode(
      args as UpdateCashbackTierInstructionDataArgs
    ),
    programAddress,
  } as UpdateCashbackTierInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCashbackAccount,
    TAccountUser,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type UpdateCashbackTierInput<
  TAccountAdmin extends string = string,
  TAccountCashbackAccount extends string = string,
  TAccountUser extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Admin who can update tiers */
  admin: TransactionSigner<TAccountAdmin>;
  /** The cashback account to update */
  cashbackAccount: Address<TAccountCashbackAccount>;
  /** The user whose tier is being updated */
  user: Address<TAccountUser>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  newTier: UpdateCashbackTierInstructionDataArgs['newTier'];
};

export function getUpdateCashbackTierInstruction<
  TAccountAdmin extends string,
  TAccountCashbackAccount extends string,
  TAccountUser extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: UpdateCashbackTierInput<
    TAccountAdmin,
    TAccountCashbackAccount,
    TAccountUser,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateCashbackTierInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountCashbackAccount,
  TAccountUser,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    cashbackAccount: { value: input.cashbackAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.cashbackAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getUpdateCashbackTierInstructionDataEncoder().encode(
      args as UpdateCashbackTierInstructionDataArgs
    ),
    programAddress,
  } as UpdateCashbackTierInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCashbackAccount,
    TAccountUser,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedUpdateCashbackTierInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Admin who can update tiers */
    admin: TAccountMetas[0];
    /** The cashback account to update */
    cashbackAccount: TAccountMetas[1];
    /** The user whose tier is being updated */
    user: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: UpdateCashbackTierInstructionData;
};

export function parseUpdateCashbackTierInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateCashbackTierInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      cashbackAccount: getNextAccount(),
      user: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getUpdateCashbackTierInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
