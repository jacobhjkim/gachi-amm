/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_CASHBACK_DISCRIMINATOR = new Uint8Array([
  37, 58, 35, 126, 190, 53, 228, 197,
]);

export function getClaimCashbackDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_CASHBACK_DISCRIMINATOR
  );
}

export type ClaimCashbackInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountCashbackAccount extends string | AccountMeta<string> = string,
  TAccountWsolMint extends string | AccountMeta<string> = string,
  TAccountWsolVault extends string | AccountMeta<string> = string,
  TAccountUserWsolAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountCashbackAccount extends string
        ? WritableAccount<TAccountCashbackAccount>
        : TAccountCashbackAccount,
      TAccountWsolMint extends string
        ? ReadonlyAccount<TAccountWsolMint>
        : TAccountWsolMint,
      TAccountWsolVault extends string
        ? WritableAccount<TAccountWsolVault>
        : TAccountWsolVault,
      TAccountUserWsolAccount extends string
        ? WritableAccount<TAccountUserWsolAccount>
        : TAccountUserWsolAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimCashbackInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimCashbackInstructionDataArgs = {};

export function getClaimCashbackInstructionDataEncoder(): FixedSizeEncoder<ClaimCashbackInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_CASHBACK_DISCRIMINATOR })
  );
}

export function getClaimCashbackInstructionDataDecoder(): FixedSizeDecoder<ClaimCashbackInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimCashbackInstructionDataCodec(): FixedSizeCodec<
  ClaimCashbackInstructionDataArgs,
  ClaimCashbackInstructionData
> {
  return combineCodec(
    getClaimCashbackInstructionDataEncoder(),
    getClaimCashbackInstructionDataDecoder()
  );
}

export type ClaimCashbackAsyncInput<
  TAccountUser extends string = string,
  TAccountCashbackAccount extends string = string,
  TAccountWsolMint extends string = string,
  TAccountWsolVault extends string = string,
  TAccountUserWsolAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  cashbackAccount?: Address<TAccountCashbackAccount>;
  /** WSOL mint */
  wsolMint: Address<TAccountWsolMint>;
  /** WSOL vault for the cashback account (ATA) */
  wsolVault?: Address<TAccountWsolVault>;
  /** User's WSOL token account to receive the cashback */
  userWsolAccount: Address<TAccountUserWsolAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getClaimCashbackInstructionAsync<
  TAccountUser extends string,
  TAccountCashbackAccount extends string,
  TAccountWsolMint extends string,
  TAccountWsolVault extends string,
  TAccountUserWsolAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: ClaimCashbackAsyncInput<
    TAccountUser,
    TAccountCashbackAccount,
    TAccountWsolMint,
    TAccountWsolVault,
    TAccountUserWsolAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimCashbackInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountCashbackAccount,
    TAccountWsolMint,
    TAccountWsolVault,
    TAccountUserWsolAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    cashbackAccount: { value: input.cashbackAccount ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: false },
    wsolVault: { value: input.wsolVault ?? null, isWritable: true },
    userWsolAccount: { value: input.userWsolAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.cashbackAccount.value) {
    accounts.cashbackAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 97, 115, 104, 98, 97, 99, 107])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.wsolVault.value) {
    accounts.wsolVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.cashbackAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.wsolMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.cashbackAccount),
      getAccountMeta(accounts.wsolMint),
      getAccountMeta(accounts.wsolVault),
      getAccountMeta(accounts.userWsolAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimCashbackInstructionDataEncoder().encode({}),
  } as ClaimCashbackInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountCashbackAccount,
    TAccountWsolMint,
    TAccountWsolVault,
    TAccountUserWsolAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimCashbackInput<
  TAccountUser extends string = string,
  TAccountCashbackAccount extends string = string,
  TAccountWsolMint extends string = string,
  TAccountWsolVault extends string = string,
  TAccountUserWsolAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  cashbackAccount: Address<TAccountCashbackAccount>;
  /** WSOL mint */
  wsolMint: Address<TAccountWsolMint>;
  /** WSOL vault for the cashback account (ATA) */
  wsolVault: Address<TAccountWsolVault>;
  /** User's WSOL token account to receive the cashback */
  userWsolAccount: Address<TAccountUserWsolAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getClaimCashbackInstruction<
  TAccountUser extends string,
  TAccountCashbackAccount extends string,
  TAccountWsolMint extends string,
  TAccountWsolVault extends string,
  TAccountUserWsolAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: ClaimCashbackInput<
    TAccountUser,
    TAccountCashbackAccount,
    TAccountWsolMint,
    TAccountWsolVault,
    TAccountUserWsolAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimCashbackInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountCashbackAccount,
  TAccountWsolMint,
  TAccountWsolVault,
  TAccountUserWsolAccount,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    cashbackAccount: { value: input.cashbackAccount ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: false },
    wsolVault: { value: input.wsolVault ?? null, isWritable: true },
    userWsolAccount: { value: input.userWsolAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.cashbackAccount),
      getAccountMeta(accounts.wsolMint),
      getAccountMeta(accounts.wsolVault),
      getAccountMeta(accounts.userWsolAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimCashbackInstructionDataEncoder().encode({}),
  } as ClaimCashbackInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountCashbackAccount,
    TAccountWsolMint,
    TAccountWsolVault,
    TAccountUserWsolAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimCashbackInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    cashbackAccount: TAccountMetas[1];
    /** WSOL mint */
    wsolMint: TAccountMetas[2];
    /** WSOL vault for the cashback account (ATA) */
    wsolVault: TAccountMetas[3];
    /** User's WSOL token account to receive the cashback */
    userWsolAccount: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: ClaimCashbackInstructionData;
};

export function parseClaimCashbackInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimCashbackInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      cashbackAccount: getNextAccount(),
      wsolMint: getNextAccount(),
      wsolVault: getNextAccount(),
      userWsolAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimCashbackInstructionDataDecoder().decode(instruction.data),
  };
}
