/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_PROTOCOL_FEE_DISCRIMINATOR = new Uint8Array([
  165, 228, 133, 48, 99, 249, 255, 33,
]);

export function getClaimProtocolFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_PROTOCOL_FEE_DISCRIMINATOR
  );
}

export type ClaimProtocolFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountCurveAuthority extends
    | string
    | AccountMeta<string> = '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr',
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountCurve extends string | AccountMeta<string> = string,
  TAccountFeeClaimerTokenAccount extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountFeeClaimer extends string | AccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCurveAuthority extends string
        ? ReadonlyAccount<TAccountCurveAuthority>
        : TAccountCurveAuthority,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountCurve extends string
        ? WritableAccount<TAccountCurve>
        : TAccountCurve,
      TAccountFeeClaimerTokenAccount extends string
        ? WritableAccount<TAccountFeeClaimerTokenAccount>
        : TAccountFeeClaimerTokenAccount,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountFeeClaimer extends string
        ? WritableSignerAccount<TAccountFeeClaimer> &
            AccountSignerMeta<TAccountFeeClaimer>
        : TAccountFeeClaimer,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimProtocolFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimProtocolFeeInstructionDataArgs = {};

export function getClaimProtocolFeeInstructionDataEncoder(): FixedSizeEncoder<ClaimProtocolFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_PROTOCOL_FEE_DISCRIMINATOR })
  );
}

export function getClaimProtocolFeeInstructionDataDecoder(): FixedSizeDecoder<ClaimProtocolFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimProtocolFeeInstructionDataCodec(): FixedSizeCodec<
  ClaimProtocolFeeInstructionDataArgs,
  ClaimProtocolFeeInstructionData
> {
  return combineCodec(
    getClaimProtocolFeeInstructionDataEncoder(),
    getClaimProtocolFeeInstructionDataDecoder()
  );
}

export type ClaimProtocolFeeAsyncInput<
  TAccountCurveAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountCurve extends string = string,
  TAccountFeeClaimerTokenAccount extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  curveAuthority?: Address<TAccountCurveAuthority>;
  config: Address<TAccountConfig>;
  curve: Address<TAccountCurve>;
  /** Fee claimer's token account to receive the claimed fees */
  feeClaimerTokenAccount?: Address<TAccountFeeClaimerTokenAccount>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  /** The fee claimer */
  feeClaimer: TransactionSigner<TAccountFeeClaimer>;
  /** Quote token program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getClaimProtocolFeeInstructionAsync<
  TAccountCurveAuthority extends string,
  TAccountConfig extends string,
  TAccountCurve extends string,
  TAccountFeeClaimerTokenAccount extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountFeeClaimer extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: ClaimProtocolFeeAsyncInput<
    TAccountCurveAuthority,
    TAccountConfig,
    TAccountCurve,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimProtocolFeeInstruction<
    TProgramAddress,
    TAccountCurveAuthority,
    TAccountConfig,
    TAccountCurve,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    feeClaimerTokenAccount: {
      value: input.feeClaimerTokenAccount ?? null,
      isWritable: true,
    },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: true },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.feeClaimerTokenAccount.value) {
    accounts.feeClaimerTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.feeClaimer.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenQuoteProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.feeClaimerTokenAccount),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimProtocolFeeInstructionDataEncoder().encode({}),
  } as ClaimProtocolFeeInstruction<
    TProgramAddress,
    TAccountCurveAuthority,
    TAccountConfig,
    TAccountCurve,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimProtocolFeeInput<
  TAccountCurveAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountCurve extends string = string,
  TAccountFeeClaimerTokenAccount extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  curveAuthority?: Address<TAccountCurveAuthority>;
  config: Address<TAccountConfig>;
  curve: Address<TAccountCurve>;
  /** Fee claimer's token account to receive the claimed fees */
  feeClaimerTokenAccount: Address<TAccountFeeClaimerTokenAccount>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  /** The fee claimer */
  feeClaimer: TransactionSigner<TAccountFeeClaimer>;
  /** Quote token program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getClaimProtocolFeeInstruction<
  TAccountCurveAuthority extends string,
  TAccountConfig extends string,
  TAccountCurve extends string,
  TAccountFeeClaimerTokenAccount extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountFeeClaimer extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: ClaimProtocolFeeInput<
    TAccountCurveAuthority,
    TAccountConfig,
    TAccountCurve,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimProtocolFeeInstruction<
  TProgramAddress,
  TAccountCurveAuthority,
  TAccountConfig,
  TAccountCurve,
  TAccountFeeClaimerTokenAccount,
  TAccountQuoteVault,
  TAccountQuoteMint,
  TAccountFeeClaimer,
  TAccountTokenQuoteProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    curveAuthority: { value: input.curveAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    curve: { value: input.curve ?? null, isWritable: true },
    feeClaimerTokenAccount: {
      value: input.feeClaimerTokenAccount ?? null,
      isWritable: true,
    },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: true },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.curveAuthority.value) {
    accounts.curveAuthority.value =
      '8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr' as Address<'8ZQvsV5qd1d2hpWawQ7VbDPd9qog1P3db3Bkf8SWQ4zr'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.curveAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.curve),
      getAccountMeta(accounts.feeClaimerTokenAccount),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimProtocolFeeInstructionDataEncoder().encode({}),
  } as ClaimProtocolFeeInstruction<
    TProgramAddress,
    TAccountCurveAuthority,
    TAccountConfig,
    TAccountCurve,
    TAccountFeeClaimerTokenAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimProtocolFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    curveAuthority: TAccountMetas[0];
    config: TAccountMetas[1];
    curve: TAccountMetas[2];
    /** Fee claimer's token account to receive the claimed fees */
    feeClaimerTokenAccount: TAccountMetas[3];
    /** The vault token account for output token */
    quoteVault: TAccountMetas[4];
    /** The mint of quote token */
    quoteMint: TAccountMetas[5];
    /** The fee claimer */
    feeClaimer: TAccountMetas[6];
    /** Quote token program */
    tokenQuoteProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    eventAuthority: TAccountMetas[10];
    program: TAccountMetas[11];
  };
  data: ClaimProtocolFeeInstructionData;
};

export function parseClaimProtocolFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimProtocolFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      curveAuthority: getNextAccount(),
      config: getNextAccount(),
      curve: getNextAccount(),
      feeClaimerTokenAccount: getNextAccount(),
      quoteVault: getNextAccount(),
      quoteMint: getNextAccount(),
      feeClaimer: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimProtocolFeeInstructionDataDecoder().decode(instruction.data),
  };
}
