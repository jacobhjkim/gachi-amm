/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { AMM_PROGRAM_ADDRESS } from '../programs';

/** Unauthorized: Unauthorized operation */
export const AMM_ERROR__UNAUTHORIZED = 0x1770; // 6000
/** InvalidAmmConfig: Invalid amm config */
export const AMM_ERROR__INVALID_AMM_CONFIG = 0x1771; // 6001
/** InvalidTokenName: Invalid token name: must be 1-32 characters */
export const AMM_ERROR__INVALID_TOKEN_NAME = 0x1772; // 6002
/** InvalidTokenSymbol: Invalid token symbol: must be 1-10 characters */
export const AMM_ERROR__INVALID_TOKEN_SYMBOL = 0x1773; // 6003
/** InvalidTokenUri: Invalid token URI: must be 1-200 characters */
export const AMM_ERROR__INVALID_TOKEN_URI = 0x1774; // 6004
/** ClaimCooldownNotMet: Claim cooldown period not met */
export const AMM_ERROR__CLAIM_COOLDOWN_NOT_MET = 0x1775; // 6005
/** NoCashbackToClaim: No cashback available to claim */
export const AMM_ERROR__NO_CASHBACK_TO_CLAIM = 0x1776; // 6006
/** AccountNotInactive: Account is not inactive for required period */
export const AMM_ERROR__ACCOUNT_NOT_INACTIVE = 0x1777; // 6007
/** InvalidCashbackTier: Invalid cashback tier */
export const AMM_ERROR__INVALID_CASHBACK_TIER = 0x1778; // 6008
/** MathOverflow: Math operation overflow */
export const AMM_ERROR__MATH_OVERFLOW = 0x1779; // 6009
/** TypeCastFailed: Type cast error */
export const AMM_ERROR__TYPE_CAST_FAILED = 0x177a; // 6010
/** AmountIsZero: Amount is zero */
export const AMM_ERROR__AMOUNT_IS_ZERO = 0x177b; // 6011
/** ExceededSlippage: Exceeded slippage tolerance */
export const AMM_ERROR__EXCEEDED_SLIPPAGE = 0x177c; // 6012
/** PoolIsCompleted: Pool is completed */
export const AMM_ERROR__POOL_IS_COMPLETED = 0x177d; // 6013
/** PoolIsIncompleted: Pool is incompleted */
export const AMM_ERROR__POOL_IS_INCOMPLETED = 0x177e; // 6014
/** SwapAmountIsOverAThreshold: Swap amount is over a threshold */
export const AMM_ERROR__SWAP_AMOUNT_IS_OVER_A_THRESHOLD = 0x177f; // 6015
/** NotEnoughLiquidity: Not enough liquidity */
export const AMM_ERROR__NOT_ENOUGH_LIQUIDITY = 0x1780; // 6016
/** InsufficientLiquidityForMigration: Insufficient liquidity for migration */
export const AMM_ERROR__INSUFFICIENT_LIQUIDITY_FOR_MIGRATION = 0x1781; // 6017
/** InvalidMigrationCalculation: Invalid migration calculation */
export const AMM_ERROR__INVALID_MIGRATION_CALCULATION = 0x1782; // 6018
/** InvalidCashbackTokenAccount: Invalid cashback token account */
export const AMM_ERROR__INVALID_CASHBACK_TOKEN_ACCOUNT = 0x1783; // 6019
/** InvalidAccount: Invalid account for the instruction */
export const AMM_ERROR__INVALID_ACCOUNT = 0x1784; // 6020
/** InvalidConfigAccount: Invalid config account */
export const AMM_ERROR__INVALID_CONFIG_ACCOUNT = 0x1785; // 6021
/** InvalidTokenType: Invalid token type */
export const AMM_ERROR__INVALID_TOKEN_TYPE = 0x1786; // 6022
/** InvalidTokenDecimals: Invalid token decimals */
export const AMM_ERROR__INVALID_TOKEN_DECIMALS = 0x1787; // 6023
/** InvalidFeeBasisPoints: Invalid fee basis points */
export const AMM_ERROR__INVALID_FEE_BASIS_POINTS = 0x1788; // 6024
/** InvalidQuoteMint: Invalid quote mint */
export const AMM_ERROR__INVALID_QUOTE_MINT = 0x1789; // 6025
/** InvalidQuoteThreshold: Invalid quote threshold */
export const AMM_ERROR__INVALID_QUOTE_THRESHOLD = 0x178a; // 6026
/** InvalidCurve: Invalid curve */
export const AMM_ERROR__INVALID_CURVE = 0x178b; // 6027
/** InvalidCreatorTradingFeePercentage: Invalid creator trading fee percentage */
export const AMM_ERROR__INVALID_CREATOR_TRADING_FEE_PERCENTAGE = 0x178c; // 6028
/** NotPermitToDoThisAction: Not permit to do this action */
export const AMM_ERROR__NOT_PERMIT_TO_DO_THIS_ACTION = 0x178d; // 6029
/** MissingPoolConfigInRemainingAccount: Missing pool config in remaining account */
export const AMM_ERROR__MISSING_POOL_CONFIG_IN_REMAINING_ACCOUNT = 0x178e; // 6030
/** UnsupportNativeMintToken2022: Unsupport native mint token 2022 */
export const AMM_ERROR__UNSUPPORT_NATIVE_MINT_TOKEN2022 = 0x178f; // 6031
/** NothingToClaim: Nothing to claim */
export const AMM_ERROR__NOTHING_TO_CLAIM = 0x1790; // 6032
/** InvalidFeeType: Invalid fee type */
export const AMM_ERROR__INVALID_FEE_TYPE = 0x1791; // 6033
/** FeeTypeAlreadySet: setting the same fee type */
export const AMM_ERROR__FEE_TYPE_ALREADY_SET = 0x1792; // 6034
/** InvalidBaseVaultAmount: Invalid base vault amount */
export const AMM_ERROR__INVALID_BASE_VAULT_AMOUNT = 0x1793; // 6035

export type AmmError =
  | typeof AMM_ERROR__ACCOUNT_NOT_INACTIVE
  | typeof AMM_ERROR__AMOUNT_IS_ZERO
  | typeof AMM_ERROR__CLAIM_COOLDOWN_NOT_MET
  | typeof AMM_ERROR__EXCEEDED_SLIPPAGE
  | typeof AMM_ERROR__FEE_TYPE_ALREADY_SET
  | typeof AMM_ERROR__INSUFFICIENT_LIQUIDITY_FOR_MIGRATION
  | typeof AMM_ERROR__INVALID_ACCOUNT
  | typeof AMM_ERROR__INVALID_AMM_CONFIG
  | typeof AMM_ERROR__INVALID_BASE_VAULT_AMOUNT
  | typeof AMM_ERROR__INVALID_CASHBACK_TIER
  | typeof AMM_ERROR__INVALID_CASHBACK_TOKEN_ACCOUNT
  | typeof AMM_ERROR__INVALID_CONFIG_ACCOUNT
  | typeof AMM_ERROR__INVALID_CREATOR_TRADING_FEE_PERCENTAGE
  | typeof AMM_ERROR__INVALID_CURVE
  | typeof AMM_ERROR__INVALID_FEE_BASIS_POINTS
  | typeof AMM_ERROR__INVALID_FEE_TYPE
  | typeof AMM_ERROR__INVALID_MIGRATION_CALCULATION
  | typeof AMM_ERROR__INVALID_QUOTE_MINT
  | typeof AMM_ERROR__INVALID_QUOTE_THRESHOLD
  | typeof AMM_ERROR__INVALID_TOKEN_DECIMALS
  | typeof AMM_ERROR__INVALID_TOKEN_NAME
  | typeof AMM_ERROR__INVALID_TOKEN_SYMBOL
  | typeof AMM_ERROR__INVALID_TOKEN_TYPE
  | typeof AMM_ERROR__INVALID_TOKEN_URI
  | typeof AMM_ERROR__MATH_OVERFLOW
  | typeof AMM_ERROR__MISSING_POOL_CONFIG_IN_REMAINING_ACCOUNT
  | typeof AMM_ERROR__NO_CASHBACK_TO_CLAIM
  | typeof AMM_ERROR__NOT_ENOUGH_LIQUIDITY
  | typeof AMM_ERROR__NOTHING_TO_CLAIM
  | typeof AMM_ERROR__NOT_PERMIT_TO_DO_THIS_ACTION
  | typeof AMM_ERROR__POOL_IS_COMPLETED
  | typeof AMM_ERROR__POOL_IS_INCOMPLETED
  | typeof AMM_ERROR__SWAP_AMOUNT_IS_OVER_A_THRESHOLD
  | typeof AMM_ERROR__TYPE_CAST_FAILED
  | typeof AMM_ERROR__UNAUTHORIZED
  | typeof AMM_ERROR__UNSUPPORT_NATIVE_MINT_TOKEN2022;

let ammErrorMessages: Record<AmmError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  ammErrorMessages = {
    [AMM_ERROR__ACCOUNT_NOT_INACTIVE]: `Account is not inactive for required period`,
    [AMM_ERROR__AMOUNT_IS_ZERO]: `Amount is zero`,
    [AMM_ERROR__CLAIM_COOLDOWN_NOT_MET]: `Claim cooldown period not met`,
    [AMM_ERROR__EXCEEDED_SLIPPAGE]: `Exceeded slippage tolerance`,
    [AMM_ERROR__FEE_TYPE_ALREADY_SET]: `setting the same fee type`,
    [AMM_ERROR__INSUFFICIENT_LIQUIDITY_FOR_MIGRATION]: `Insufficient liquidity for migration`,
    [AMM_ERROR__INVALID_ACCOUNT]: `Invalid account for the instruction`,
    [AMM_ERROR__INVALID_AMM_CONFIG]: `Invalid amm config`,
    [AMM_ERROR__INVALID_BASE_VAULT_AMOUNT]: `Invalid base vault amount`,
    [AMM_ERROR__INVALID_CASHBACK_TIER]: `Invalid cashback tier`,
    [AMM_ERROR__INVALID_CASHBACK_TOKEN_ACCOUNT]: `Invalid cashback token account`,
    [AMM_ERROR__INVALID_CONFIG_ACCOUNT]: `Invalid config account`,
    [AMM_ERROR__INVALID_CREATOR_TRADING_FEE_PERCENTAGE]: `Invalid creator trading fee percentage`,
    [AMM_ERROR__INVALID_CURVE]: `Invalid curve`,
    [AMM_ERROR__INVALID_FEE_BASIS_POINTS]: `Invalid fee basis points`,
    [AMM_ERROR__INVALID_FEE_TYPE]: `Invalid fee type`,
    [AMM_ERROR__INVALID_MIGRATION_CALCULATION]: `Invalid migration calculation`,
    [AMM_ERROR__INVALID_QUOTE_MINT]: `Invalid quote mint`,
    [AMM_ERROR__INVALID_QUOTE_THRESHOLD]: `Invalid quote threshold`,
    [AMM_ERROR__INVALID_TOKEN_DECIMALS]: `Invalid token decimals`,
    [AMM_ERROR__INVALID_TOKEN_NAME]: `Invalid token name: must be 1-32 characters`,
    [AMM_ERROR__INVALID_TOKEN_SYMBOL]: `Invalid token symbol: must be 1-10 characters`,
    [AMM_ERROR__INVALID_TOKEN_TYPE]: `Invalid token type`,
    [AMM_ERROR__INVALID_TOKEN_URI]: `Invalid token URI: must be 1-200 characters`,
    [AMM_ERROR__MATH_OVERFLOW]: `Math operation overflow`,
    [AMM_ERROR__MISSING_POOL_CONFIG_IN_REMAINING_ACCOUNT]: `Missing pool config in remaining account`,
    [AMM_ERROR__NO_CASHBACK_TO_CLAIM]: `No cashback available to claim`,
    [AMM_ERROR__NOT_ENOUGH_LIQUIDITY]: `Not enough liquidity`,
    [AMM_ERROR__NOTHING_TO_CLAIM]: `Nothing to claim`,
    [AMM_ERROR__NOT_PERMIT_TO_DO_THIS_ACTION]: `Not permit to do this action`,
    [AMM_ERROR__POOL_IS_COMPLETED]: `Pool is completed`,
    [AMM_ERROR__POOL_IS_INCOMPLETED]: `Pool is incompleted`,
    [AMM_ERROR__SWAP_AMOUNT_IS_OVER_A_THRESHOLD]: `Swap amount is over a threshold`,
    [AMM_ERROR__TYPE_CAST_FAILED]: `Type cast error`,
    [AMM_ERROR__UNAUTHORIZED]: `Unauthorized operation`,
    [AMM_ERROR__UNSUPPORT_NATIVE_MINT_TOKEN2022]: `Unsupport native mint token 2022`,
  };
}

export function getAmmErrorMessage(code: AmmError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ammErrorMessages as Record<AmmError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isAmmError<TProgramErrorCode extends AmmError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    AMM_PROGRAM_ADDRESS,
    code
  );
}
