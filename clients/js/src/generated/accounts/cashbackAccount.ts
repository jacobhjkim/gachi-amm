/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CASHBACK_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  248, 209, 31, 44, 220, 186, 122, 131,
]);

export function getCashbackAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CASHBACK_ACCOUNT_DISCRIMINATOR
  );
}

export type CashbackAccount = {
  discriminator: ReadonlyUint8Array;
  /** owner of the cashback account */
  owner: Address;
  /** current cashback tier - updated by admin off-chain based on trading volume */
  currentTier: number;
  padding: ReadonlyUint8Array;
  /** unix timestamp of last claim */
  lastClaimTimestamp: bigint;
};

export type CashbackAccountArgs = {
  /** owner of the cashback account */
  owner: Address;
  /** current cashback tier - updated by admin off-chain based on trading volume */
  currentTier: number;
  padding: ReadonlyUint8Array;
  /** unix timestamp of last claim */
  lastClaimTimestamp: number | bigint;
};

export function getCashbackAccountEncoder(): FixedSizeEncoder<CashbackAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['currentTier', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 7)],
      ['lastClaimTimestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CASHBACK_ACCOUNT_DISCRIMINATOR })
  );
}

export function getCashbackAccountDecoder(): FixedSizeDecoder<CashbackAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['currentTier', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 7)],
    ['lastClaimTimestamp', getI64Decoder()],
  ]);
}

export function getCashbackAccountCodec(): FixedSizeCodec<
  CashbackAccountArgs,
  CashbackAccount
> {
  return combineCodec(getCashbackAccountEncoder(), getCashbackAccountDecoder());
}

export function decodeCashbackAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CashbackAccount, TAddress>;
export function decodeCashbackAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CashbackAccount, TAddress>;
export function decodeCashbackAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<CashbackAccount, TAddress>
  | MaybeAccount<CashbackAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCashbackAccountDecoder()
  );
}

export async function fetchCashbackAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CashbackAccount, TAddress>> {
  const maybeAccount = await fetchMaybeCashbackAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCashbackAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CashbackAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCashbackAccount(maybeAccount);
}

export async function fetchAllCashbackAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CashbackAccount>[]> {
  const maybeAccounts = await fetchAllMaybeCashbackAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCashbackAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CashbackAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCashbackAccount(maybeAccount)
  );
}

export function getCashbackAccountSize(): number {
  return 56;
}
