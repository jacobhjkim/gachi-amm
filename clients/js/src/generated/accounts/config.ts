/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLiquidityDistributionConfigDecoder,
  getLiquidityDistributionConfigEncoder,
  getLockedVestingConfigDecoder,
  getLockedVestingConfigEncoder,
  type LiquidityDistributionConfig,
  type LiquidityDistributionConfigArgs,
  type LockedVestingConfig,
  type LockedVestingConfigArgs,
} from '../types';

export const CONFIG_DISCRIMINATOR = new Uint8Array([
  155, 12, 170, 224, 30, 250, 204, 130,
]);

export function getConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONFIG_DISCRIMINATOR);
}

export type Config = {
  discriminator: ReadonlyUint8Array;
  /** quote mint */
  quoteMint: Address;
  /** fee claimer */
  feeClaimer: Address;
  /** token type (0 | 1), 0: SPL Token, 1: Token2022 */
  tokenType: number;
  /** quote token flag (either SPL Token or Token2022) */
  quoteTokenFlag: number;
  /** token decimal, (6 | 9) */
  tokenDecimal: number;
  /** padding 1 */
  padding1: ReadonlyUint8Array;
  /** Trading fee in bps */
  feeBasisPoints: number;
  /** Level 1 referral fee in bps */
  l1ReferralFeeBasisPoints: number;
  /** Level 2 referral fee in bps */
  l2ReferralFeeBasisPoints: number;
  /** Level 3 referral fee in bps */
  l3ReferralFeeBasisPoints: number;
  /** Referee discount fee in bps (if the user has a referral, they will get this discount) */
  refereeDiscountBasisPoints: number;
  /** creator fee in bps */
  creatorFeeBasisPoints: number;
  /** migration fee in bps (quote token fee) */
  migrationFeeBasisPoints: number;
  padding2: ReadonlyUint8Array;
  /** total amount of quote token raised for migration */
  migrationQuoteThreshold: bigint;
  /** migration base threshold (in base token) */
  migrationBaseThreshold: bigint;
  /** base token amount to sell before migration */
  swapBaseAmount: bigint;
  /** initial sqrt price, the minimum price */
  initialSqrtPrice: bigint;
  /** migration sqrt price, once we reach this price, we will migrate */
  migrationSqrtPrice: bigint;
  /** locked vesting config */
  lockedVestingConfig: LockedVestingConfig;
  /** curve, only use 4 points firstly, we can extend that later */
  curve: Array<LiquidityDistributionConfig>;
};

export type ConfigArgs = {
  /** quote mint */
  quoteMint: Address;
  /** fee claimer */
  feeClaimer: Address;
  /** token type (0 | 1), 0: SPL Token, 1: Token2022 */
  tokenType: number;
  /** quote token flag (either SPL Token or Token2022) */
  quoteTokenFlag: number;
  /** token decimal, (6 | 9) */
  tokenDecimal: number;
  /** padding 1 */
  padding1: ReadonlyUint8Array;
  /** Trading fee in bps */
  feeBasisPoints: number;
  /** Level 1 referral fee in bps */
  l1ReferralFeeBasisPoints: number;
  /** Level 2 referral fee in bps */
  l2ReferralFeeBasisPoints: number;
  /** Level 3 referral fee in bps */
  l3ReferralFeeBasisPoints: number;
  /** Referee discount fee in bps (if the user has a referral, they will get this discount) */
  refereeDiscountBasisPoints: number;
  /** creator fee in bps */
  creatorFeeBasisPoints: number;
  /** migration fee in bps (quote token fee) */
  migrationFeeBasisPoints: number;
  padding2: ReadonlyUint8Array;
  /** total amount of quote token raised for migration */
  migrationQuoteThreshold: number | bigint;
  /** migration base threshold (in base token) */
  migrationBaseThreshold: number | bigint;
  /** base token amount to sell before migration */
  swapBaseAmount: number | bigint;
  /** initial sqrt price, the minimum price */
  initialSqrtPrice: number | bigint;
  /** migration sqrt price, once we reach this price, we will migrate */
  migrationSqrtPrice: number | bigint;
  /** locked vesting config */
  lockedVestingConfig: LockedVestingConfigArgs;
  /** curve, only use 4 points firstly, we can extend that later */
  curve: Array<LiquidityDistributionConfigArgs>;
};

export function getConfigEncoder(): FixedSizeEncoder<ConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['quoteMint', getAddressEncoder()],
      ['feeClaimer', getAddressEncoder()],
      ['tokenType', getU8Encoder()],
      ['quoteTokenFlag', getU8Encoder()],
      ['tokenDecimal', getU8Encoder()],
      ['padding1', fixEncoderSize(getBytesEncoder(), 5)],
      ['feeBasisPoints', getU16Encoder()],
      ['l1ReferralFeeBasisPoints', getU16Encoder()],
      ['l2ReferralFeeBasisPoints', getU16Encoder()],
      ['l3ReferralFeeBasisPoints', getU16Encoder()],
      ['refereeDiscountBasisPoints', getU16Encoder()],
      ['creatorFeeBasisPoints', getU16Encoder()],
      ['migrationFeeBasisPoints', getU16Encoder()],
      ['padding2', fixEncoderSize(getBytesEncoder(), 2)],
      ['migrationQuoteThreshold', getU64Encoder()],
      ['migrationBaseThreshold', getU64Encoder()],
      ['swapBaseAmount', getU64Encoder()],
      ['initialSqrtPrice', getU128Encoder()],
      ['migrationSqrtPrice', getU128Encoder()],
      ['lockedVestingConfig', getLockedVestingConfigEncoder()],
      [
        'curve',
        getArrayEncoder(getLiquidityDistributionConfigEncoder(), { size: 4 }),
      ],
    ]),
    (value) => ({ ...value, discriminator: CONFIG_DISCRIMINATOR })
  );
}

export function getConfigDecoder(): FixedSizeDecoder<Config> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['quoteMint', getAddressDecoder()],
    ['feeClaimer', getAddressDecoder()],
    ['tokenType', getU8Decoder()],
    ['quoteTokenFlag', getU8Decoder()],
    ['tokenDecimal', getU8Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 5)],
    ['feeBasisPoints', getU16Decoder()],
    ['l1ReferralFeeBasisPoints', getU16Decoder()],
    ['l2ReferralFeeBasisPoints', getU16Decoder()],
    ['l3ReferralFeeBasisPoints', getU16Decoder()],
    ['refereeDiscountBasisPoints', getU16Decoder()],
    ['creatorFeeBasisPoints', getU16Decoder()],
    ['migrationFeeBasisPoints', getU16Decoder()],
    ['padding2', fixDecoderSize(getBytesDecoder(), 2)],
    ['migrationQuoteThreshold', getU64Decoder()],
    ['migrationBaseThreshold', getU64Decoder()],
    ['swapBaseAmount', getU64Decoder()],
    ['initialSqrtPrice', getU128Decoder()],
    ['migrationSqrtPrice', getU128Decoder()],
    ['lockedVestingConfig', getLockedVestingConfigDecoder()],
    [
      'curve',
      getArrayDecoder(getLiquidityDistributionConfigDecoder(), { size: 4 }),
    ],
  ]);
}

export function getConfigCodec(): FixedSizeCodec<ConfigArgs, Config> {
  return combineCodec(getConfigEncoder(), getConfigDecoder());
}

export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Config, TAddress> | MaybeAccount<Config, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConfigDecoder()
  );
}

export async function fetchConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Config, TAddress>> {
  const maybeAccount = await fetchMaybeConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Config, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeConfig(maybeAccount);
}

export async function fetchAllConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Config>[]> {
  const maybeAccounts = await fetchAllMaybeConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Config>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeConfig(maybeAccount));
}

export function getConfigSize(): number {
  return 328;
}
