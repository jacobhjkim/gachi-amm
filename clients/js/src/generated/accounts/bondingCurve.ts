/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const BONDING_CURVE_DISCRIMINATOR = new Uint8Array([
  23, 183, 248, 55, 96, 216, 172, 96,
]);

export function getBondingCurveDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BONDING_CURVE_DISCRIMINATOR
  );
}

export type BondingCurve = {
  discriminator: ReadonlyUint8Array;
  /** which config this bonding curve belongs */
  config: Address;
  /** token creator */
  creator: Address;
  /** base mint */
  baseMint: Address;
  /** base vault */
  baseVault: Address;
  /** quote vault */
  quoteVault: Address;
  /** base reserve */
  baseReserve: bigint;
  /** virtual base reserve, used for price calculation */
  virtualBaseReserve: bigint;
  /** quote reserve */
  quoteReserve: bigint;
  /** virtual quote reserve, used for price calculation */
  virtualQuoteReserve: bigint;
  /** current sqrt_price */
  sqrtPrice: bigint;
  /** curve type, spl token or token2022 */
  curveType: number;
  /** fee type, (0: project/creator, 1: meme/community, 2: blocked) */
  feeType: number;
  /** if the curve's fee_type has been reviewed by the admins. (0: not reviewed, 1: reviewed) */
  feeTypeReviewed: number;
  /** is migrated */
  isMigrated: number;
  /** migration status enum (0: PreBondingCurve, 1: PostBondingCurve, 2: CreatedPool) */
  migrationStatus: number;
  /** padding 1 */
  padding1: ReadonlyUint8Array;
  /** The time curve is finished */
  curveFinishTimestamp: bigint;
  /** The protocol fee */
  protocolFee: bigint;
  /** The creator/meme fee reserve */
  creatorFee: bigint;
};

export type BondingCurveArgs = {
  /** which config this bonding curve belongs */
  config: Address;
  /** token creator */
  creator: Address;
  /** base mint */
  baseMint: Address;
  /** base vault */
  baseVault: Address;
  /** quote vault */
  quoteVault: Address;
  /** base reserve */
  baseReserve: number | bigint;
  /** virtual base reserve, used for price calculation */
  virtualBaseReserve: number | bigint;
  /** quote reserve */
  quoteReserve: number | bigint;
  /** virtual quote reserve, used for price calculation */
  virtualQuoteReserve: number | bigint;
  /** current sqrt_price */
  sqrtPrice: number | bigint;
  /** curve type, spl token or token2022 */
  curveType: number;
  /** fee type, (0: project/creator, 1: meme/community, 2: blocked) */
  feeType: number;
  /** if the curve's fee_type has been reviewed by the admins. (0: not reviewed, 1: reviewed) */
  feeTypeReviewed: number;
  /** is migrated */
  isMigrated: number;
  /** migration status enum (0: PreBondingCurve, 1: PostBondingCurve, 2: CreatedPool) */
  migrationStatus: number;
  /** padding 1 */
  padding1: ReadonlyUint8Array;
  /** The time curve is finished */
  curveFinishTimestamp: number | bigint;
  /** The protocol fee */
  protocolFee: number | bigint;
  /** The creator/meme fee reserve */
  creatorFee: number | bigint;
};

export function getBondingCurveEncoder(): FixedSizeEncoder<BondingCurveArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['config', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['baseMint', getAddressEncoder()],
      ['baseVault', getAddressEncoder()],
      ['quoteVault', getAddressEncoder()],
      ['baseReserve', getU64Encoder()],
      ['virtualBaseReserve', getU64Encoder()],
      ['quoteReserve', getU64Encoder()],
      ['virtualQuoteReserve', getU64Encoder()],
      ['sqrtPrice', getU128Encoder()],
      ['curveType', getU8Encoder()],
      ['feeType', getU8Encoder()],
      ['feeTypeReviewed', getU8Encoder()],
      ['isMigrated', getU8Encoder()],
      ['migrationStatus', getU8Encoder()],
      ['padding1', fixEncoderSize(getBytesEncoder(), 3)],
      ['curveFinishTimestamp', getU64Encoder()],
      ['protocolFee', getU64Encoder()],
      ['creatorFee', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BONDING_CURVE_DISCRIMINATOR })
  );
}

export function getBondingCurveDecoder(): FixedSizeDecoder<BondingCurve> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['config', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['baseVault', getAddressDecoder()],
    ['quoteVault', getAddressDecoder()],
    ['baseReserve', getU64Decoder()],
    ['virtualBaseReserve', getU64Decoder()],
    ['quoteReserve', getU64Decoder()],
    ['virtualQuoteReserve', getU64Decoder()],
    ['sqrtPrice', getU128Decoder()],
    ['curveType', getU8Decoder()],
    ['feeType', getU8Decoder()],
    ['feeTypeReviewed', getU8Decoder()],
    ['isMigrated', getU8Decoder()],
    ['migrationStatus', getU8Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 3)],
    ['curveFinishTimestamp', getU64Decoder()],
    ['protocolFee', getU64Decoder()],
    ['creatorFee', getU64Decoder()],
  ]);
}

export function getBondingCurveCodec(): FixedSizeCodec<
  BondingCurveArgs,
  BondingCurve
> {
  return combineCodec(getBondingCurveEncoder(), getBondingCurveDecoder());
}

export function decodeBondingCurve<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BondingCurve, TAddress>;
export function decodeBondingCurve<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BondingCurve, TAddress>;
export function decodeBondingCurve<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<BondingCurve, TAddress> | MaybeAccount<BondingCurve, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBondingCurveDecoder()
  );
}

export async function fetchBondingCurve<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BondingCurve, TAddress>> {
  const maybeAccount = await fetchMaybeBondingCurve(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBondingCurve<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BondingCurve, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBondingCurve(maybeAccount);
}

export async function fetchAllBondingCurve(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BondingCurve>[]> {
  const maybeAccounts = await fetchAllMaybeBondingCurve(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBondingCurve(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BondingCurve>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBondingCurve(maybeAccount));
}

export function getBondingCurveSize(): number {
  return 248;
}
